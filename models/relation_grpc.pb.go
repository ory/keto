// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package models

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RelationTupleServiceClient is the client API for RelationTupleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationTupleServiceClient interface {
	ReadRelationTuples(ctx context.Context, in *ReadRelationTuplesRequest, opts ...grpc.CallOption) (*ReadRelationTuplesResponse, error)
	WriteRelationTuple(ctx context.Context, in *WriteRelationTupleRequest, opts ...grpc.CallOption) (*WriteRelationTupleResponse, error)
}

type relationTupleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationTupleServiceClient(cc grpc.ClientConnInterface) RelationTupleServiceClient {
	return &relationTupleServiceClient{cc}
}

func (c *relationTupleServiceClient) ReadRelationTuples(ctx context.Context, in *ReadRelationTuplesRequest, opts ...grpc.CallOption) (*ReadRelationTuplesResponse, error) {
	out := new(ReadRelationTuplesResponse)
	err := c.cc.Invoke(ctx, "/models.RelationTupleService/ReadRelationTuples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationTupleServiceClient) WriteRelationTuple(ctx context.Context, in *WriteRelationTupleRequest, opts ...grpc.CallOption) (*WriteRelationTupleResponse, error) {
	out := new(WriteRelationTupleResponse)
	err := c.cc.Invoke(ctx, "/models.RelationTupleService/WriteRelationTuple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationTupleServiceServer is the server API for RelationTupleService service.
// All implementations must embed UnimplementedRelationTupleServiceServer
// for forward compatibility
type RelationTupleServiceServer interface {
	ReadRelationTuples(context.Context, *ReadRelationTuplesRequest) (*ReadRelationTuplesResponse, error)
	WriteRelationTuple(context.Context, *WriteRelationTupleRequest) (*WriteRelationTupleResponse, error)
	mustEmbedUnimplementedRelationTupleServiceServer()
}

// UnimplementedRelationTupleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationTupleServiceServer struct {
}

func (UnimplementedRelationTupleServiceServer) ReadRelationTuples(context.Context, *ReadRelationTuplesRequest) (*ReadRelationTuplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRelationTuples not implemented")
}
func (UnimplementedRelationTupleServiceServer) WriteRelationTuple(context.Context, *WriteRelationTupleRequest) (*WriteRelationTupleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRelationTuple not implemented")
}
func (UnimplementedRelationTupleServiceServer) mustEmbedUnimplementedRelationTupleServiceServer() {}

// UnsafeRelationTupleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationTupleServiceServer will
// result in compilation errors.
type UnsafeRelationTupleServiceServer interface {
	mustEmbedUnimplementedRelationTupleServiceServer()
}

func RegisterRelationTupleServiceServer(s *grpc.Server, srv RelationTupleServiceServer) {
	s.RegisterService(&_RelationTupleService_serviceDesc, srv)
}

func _RelationTupleService_ReadRelationTuples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRelationTuplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationTupleServiceServer).ReadRelationTuples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.RelationTupleService/ReadRelationTuples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationTupleServiceServer).ReadRelationTuples(ctx, req.(*ReadRelationTuplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationTupleService_WriteRelationTuple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRelationTupleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationTupleServiceServer).WriteRelationTuple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.RelationTupleService/WriteRelationTuple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationTupleServiceServer).WriteRelationTuple(ctx, req.(*WriteRelationTupleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelationTupleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.RelationTupleService",
	HandlerType: (*RelationTupleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadRelationTuples",
			Handler:    _RelationTupleService_ReadRelationTuples_Handler,
		},
		{
			MethodName: "WriteRelationTuple",
			Handler:    _RelationTupleService_WriteRelationTuple_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models/relation.proto",
}
