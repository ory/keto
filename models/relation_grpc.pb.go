// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package models

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GRPCRelationReaderClient is the client API for GRPCRelationReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCRelationReaderClient interface {
	RelationsByUser(ctx context.Context, in *GRPCRelationsReadRequest, opts ...grpc.CallOption) (*GRPCRelationsReadResponse, error)
	RelationsByObject(ctx context.Context, in *GRPCRelationsReadRequest, opts ...grpc.CallOption) (*GRPCRelationsReadResponse, error)
}

type gRPCRelationReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCRelationReaderClient(cc grpc.ClientConnInterface) GRPCRelationReaderClient {
	return &gRPCRelationReaderClient{cc}
}

func (c *gRPCRelationReaderClient) RelationsByUser(ctx context.Context, in *GRPCRelationsReadRequest, opts ...grpc.CallOption) (*GRPCRelationsReadResponse, error) {
	out := new(GRPCRelationsReadResponse)
	err := c.cc.Invoke(ctx, "/models.GRPCRelationReader/RelationsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRelationReaderClient) RelationsByObject(ctx context.Context, in *GRPCRelationsReadRequest, opts ...grpc.CallOption) (*GRPCRelationsReadResponse, error) {
	out := new(GRPCRelationsReadResponse)
	err := c.cc.Invoke(ctx, "/models.GRPCRelationReader/RelationsByObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCRelationReaderServer is the server API for GRPCRelationReader service.
// All implementations must embed UnimplementedGRPCRelationReaderServer
// for forward compatibility
type GRPCRelationReaderServer interface {
	RelationsByUser(context.Context, *GRPCRelationsReadRequest) (*GRPCRelationsReadResponse, error)
	RelationsByObject(context.Context, *GRPCRelationsReadRequest) (*GRPCRelationsReadResponse, error)
	mustEmbedUnimplementedGRPCRelationReaderServer()
}

// UnimplementedGRPCRelationReaderServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCRelationReaderServer struct {
}

func (UnimplementedGRPCRelationReaderServer) RelationsByUser(context.Context, *GRPCRelationsReadRequest) (*GRPCRelationsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationsByUser not implemented")
}
func (UnimplementedGRPCRelationReaderServer) RelationsByObject(context.Context, *GRPCRelationsReadRequest) (*GRPCRelationsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationsByObject not implemented")
}
func (UnimplementedGRPCRelationReaderServer) mustEmbedUnimplementedGRPCRelationReaderServer() {}

// UnsafeGRPCRelationReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCRelationReaderServer will
// result in compilation errors.
type UnsafeGRPCRelationReaderServer interface {
	mustEmbedUnimplementedGRPCRelationReaderServer()
}

func RegisterGRPCRelationReaderServer(s *grpc.Server, srv GRPCRelationReaderServer) {
	s.RegisterService(&_GRPCRelationReader_serviceDesc, srv)
}

func _GRPCRelationReader_RelationsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCRelationsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRelationReaderServer).RelationsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GRPCRelationReader/RelationsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRelationReaderServer).RelationsByUser(ctx, req.(*GRPCRelationsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRelationReader_RelationsByObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCRelationsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRelationReaderServer).RelationsByObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GRPCRelationReader/RelationsByObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRelationReaderServer).RelationsByObject(ctx, req.(*GRPCRelationsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCRelationReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.GRPCRelationReader",
	HandlerType: (*GRPCRelationReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationsByUser",
			Handler:    _GRPCRelationReader_RelationsByUser_Handler,
		},
		{
			MethodName: "RelationsByObject",
			Handler:    _GRPCRelationReader_RelationsByObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models/relation.proto",
}
