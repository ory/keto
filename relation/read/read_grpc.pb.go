// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package read

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RelationReaderClient is the client API for RelationReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationReaderClient interface {
	RelationsByUser(ctx context.Context, in *RelationsRequest, opts ...grpc.CallOption) (*RelationsResponse, error)
	RelationsByObject(ctx context.Context, in *RelationsRequest, opts ...grpc.CallOption) (*RelationsResponse, error)
}

type relationReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationReaderClient(cc grpc.ClientConnInterface) RelationReaderClient {
	return &relationReaderClient{cc}
}

func (c *relationReaderClient) RelationsByUser(ctx context.Context, in *RelationsRequest, opts ...grpc.CallOption) (*RelationsResponse, error) {
	out := new(RelationsResponse)
	err := c.cc.Invoke(ctx, "/read.RelationReader/RelationsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationReaderClient) RelationsByObject(ctx context.Context, in *RelationsRequest, opts ...grpc.CallOption) (*RelationsResponse, error) {
	out := new(RelationsResponse)
	err := c.cc.Invoke(ctx, "/read.RelationReader/RelationsByObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationReaderServer is the server API for RelationReader service.
// All implementations must embed UnimplementedRelationReaderServer
// for forward compatibility
type RelationReaderServer interface {
	RelationsByUser(context.Context, *RelationsRequest) (*RelationsResponse, error)
	RelationsByObject(context.Context, *RelationsRequest) (*RelationsResponse, error)
	mustEmbedUnimplementedRelationReaderServer()
}

// UnimplementedRelationReaderServer must be embedded to have forward compatible implementations.
type UnimplementedRelationReaderServer struct {
}

func (UnimplementedRelationReaderServer) RelationsByUser(context.Context, *RelationsRequest) (*RelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationsByUser not implemented")
}
func (UnimplementedRelationReaderServer) RelationsByObject(context.Context, *RelationsRequest) (*RelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationsByObject not implemented")
}
func (UnimplementedRelationReaderServer) mustEmbedUnimplementedRelationReaderServer() {}

// UnsafeRelationReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationReaderServer will
// result in compilation errors.
type UnsafeRelationReaderServer interface {
	mustEmbedUnimplementedRelationReaderServer()
}

func RegisterRelationReaderServer(s *grpc.Server, srv RelationReaderServer) {
	s.RegisterService(&_RelationReader_serviceDesc, srv)
}

func _RelationReader_RelationsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationReaderServer).RelationsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/read.RelationReader/RelationsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationReaderServer).RelationsByUser(ctx, req.(*RelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationReader_RelationsByObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationReaderServer).RelationsByObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/read.RelationReader/RelationsByObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationReaderServer).RelationsByObject(ctx, req.(*RelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelationReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "read.RelationReader",
	HandlerType: (*RelationReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationsByUser",
			Handler:    _RelationReader_RelationsByUser_Handler,
		},
		{
			MethodName: "RelationsByObject",
			Handler:    _RelationReader_RelationsByObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation/read/read.proto",
}
