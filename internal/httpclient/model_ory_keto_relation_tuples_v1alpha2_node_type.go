/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * API version:
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// OryKetoRelationTuplesV1alpha2NodeType  - union: This node expands to a union of all children.  - exclusion: Not implemented yet.  - intersection: Not implemented yet.  - leaf: This node is a leaf and contains no children. Its subject is a `SubjectID` unless `max_depth` was reached.  - tuple_to_subject_set: This node is a leaf and contains no children. Its subject is a `SubjectID` unless `max_depth` was reached.  - computed_subject_set: This node is a leaf and contains no children. Its subject is a `SubjectID` unless `max_depth` was reached.  - not: This node is a leaf and contains no children. Its subject is a `SubjectID` unless `max_depth` was reached.
type OryKetoRelationTuplesV1alpha2NodeType string

// List of ory.keto.relation_tuples.v1alpha2.NodeType
const (
	ORYKETORELATIONTUPLESV1ALPHA2NODETYPE_UNSPECIFIED          OryKetoRelationTuplesV1alpha2NodeType = "unspecified"
	ORYKETORELATIONTUPLESV1ALPHA2NODETYPE_UNION                OryKetoRelationTuplesV1alpha2NodeType = "union"
	ORYKETORELATIONTUPLESV1ALPHA2NODETYPE_EXCLUSION            OryKetoRelationTuplesV1alpha2NodeType = "exclusion"
	ORYKETORELATIONTUPLESV1ALPHA2NODETYPE_INTERSECTION         OryKetoRelationTuplesV1alpha2NodeType = "intersection"
	ORYKETORELATIONTUPLESV1ALPHA2NODETYPE_LEAF                 OryKetoRelationTuplesV1alpha2NodeType = "leaf"
	ORYKETORELATIONTUPLESV1ALPHA2NODETYPE_TUPLE_TO_SUBJECT_SET OryKetoRelationTuplesV1alpha2NodeType = "tuple_to_subject_set"
	ORYKETORELATIONTUPLESV1ALPHA2NODETYPE_COMPUTED_SUBJECT_SET OryKetoRelationTuplesV1alpha2NodeType = "computed_subject_set"
	ORYKETORELATIONTUPLESV1ALPHA2NODETYPE_NOT                  OryKetoRelationTuplesV1alpha2NodeType = "not"
)

func (v *OryKetoRelationTuplesV1alpha2NodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OryKetoRelationTuplesV1alpha2NodeType(value)
	for _, existing := range []OryKetoRelationTuplesV1alpha2NodeType{"unspecified", "union", "exclusion", "intersection", "leaf", "tuple_to_subject_set", "computed_subject_set", "not"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OryKetoRelationTuplesV1alpha2NodeType", value)
}

// Ptr returns reference to ory.keto.relation_tuples.v1alpha2.NodeType value
func (v OryKetoRelationTuplesV1alpha2NodeType) Ptr() *OryKetoRelationTuplesV1alpha2NodeType {
	return &v
}

type NullableOryKetoRelationTuplesV1alpha2NodeType struct {
	value *OryKetoRelationTuplesV1alpha2NodeType
	isSet bool
}

func (v NullableOryKetoRelationTuplesV1alpha2NodeType) Get() *OryKetoRelationTuplesV1alpha2NodeType {
	return v.value
}

func (v *NullableOryKetoRelationTuplesV1alpha2NodeType) Set(val *OryKetoRelationTuplesV1alpha2NodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableOryKetoRelationTuplesV1alpha2NodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableOryKetoRelationTuplesV1alpha2NodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOryKetoRelationTuplesV1alpha2NodeType(val *OryKetoRelationTuplesV1alpha2NodeType) *NullableOryKetoRelationTuplesV1alpha2NodeType {
	return &NullableOryKetoRelationTuplesV1alpha2NodeType{value: val, isSet: true}
}

func (v NullableOryKetoRelationTuplesV1alpha2NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOryKetoRelationTuplesV1alpha2NodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
