/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * API version:
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SubjectSetQuery SubjectSetQuery refers to all subjects who have the same `relation` on an `object`.
type SubjectSetQuery struct {
	// The namespace of the object and relation referenced in this subject set.
	Namespace *string `json:"namespace,omitempty"`
	// The object related by this subject set.
	Object *string `json:"object,omitempty"`
	// The relation between the object and the subjects.
	Relation *string `json:"relation,omitempty"`
}

// NewSubjectSetQuery instantiates a new SubjectSetQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectSetQuery() *SubjectSetQuery {
	this := SubjectSetQuery{}
	return &this
}

// NewSubjectSetQueryWithDefaults instantiates a new SubjectSetQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectSetQueryWithDefaults() *SubjectSetQuery {
	this := SubjectSetQuery{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *SubjectSetQuery) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectSetQuery) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *SubjectSetQuery) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *SubjectSetQuery) SetNamespace(v string) {
	o.Namespace = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *SubjectSetQuery) GetObject() string {
	if o == nil || o.Object == nil {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectSetQuery) GetObjectOk() (*string, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *SubjectSetQuery) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *SubjectSetQuery) SetObject(v string) {
	o.Object = &v
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *SubjectSetQuery) GetRelation() string {
	if o == nil || o.Relation == nil {
		var ret string
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectSetQuery) GetRelationOk() (*string, bool) {
	if o == nil || o.Relation == nil {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *SubjectSetQuery) HasRelation() bool {
	if o != nil && o.Relation != nil {
		return true
	}

	return false
}

// SetRelation gets a reference to the given string and assigns it to the Relation field.
func (o *SubjectSetQuery) SetRelation(v string) {
	o.Relation = &v
}

func (o SubjectSetQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if o.Relation != nil {
		toSerialize["relation"] = o.Relation
	}
	return json.Marshal(toSerialize)
}

type NullableSubjectSetQuery struct {
	value *SubjectSetQuery
	isSet bool
}

func (v NullableSubjectSetQuery) Get() *SubjectSetQuery {
	return v.value
}

func (v *NullableSubjectSetQuery) Set(val *SubjectSetQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectSetQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectSetQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectSetQuery(val *SubjectSetQuery) *NullableSubjectSetQuery {
	return &NullableSubjectSetQuery{value: val, isSet: true}
}

func (v NullableSubjectSetQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectSetQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
