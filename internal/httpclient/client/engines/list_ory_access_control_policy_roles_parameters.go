// Code generated by go-swagger; DO NOT EDIT.

package engines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListOryAccessControlPolicyRolesParams creates a new ListOryAccessControlPolicyRolesParams object
// with the default values initialized.
func NewListOryAccessControlPolicyRolesParams() *ListOryAccessControlPolicyRolesParams {
	var ()
	return &ListOryAccessControlPolicyRolesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListOryAccessControlPolicyRolesParamsWithTimeout creates a new ListOryAccessControlPolicyRolesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListOryAccessControlPolicyRolesParamsWithTimeout(timeout time.Duration) *ListOryAccessControlPolicyRolesParams {
	var ()
	return &ListOryAccessControlPolicyRolesParams{

		timeout: timeout,
	}
}

// NewListOryAccessControlPolicyRolesParamsWithContext creates a new ListOryAccessControlPolicyRolesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListOryAccessControlPolicyRolesParamsWithContext(ctx context.Context) *ListOryAccessControlPolicyRolesParams {
	var ()
	return &ListOryAccessControlPolicyRolesParams{

		Context: ctx,
	}
}

// NewListOryAccessControlPolicyRolesParamsWithHTTPClient creates a new ListOryAccessControlPolicyRolesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListOryAccessControlPolicyRolesParamsWithHTTPClient(client *http.Client) *ListOryAccessControlPolicyRolesParams {
	var ()
	return &ListOryAccessControlPolicyRolesParams{
		HTTPClient: client,
	}
}

/*ListOryAccessControlPolicyRolesParams contains all the parameters to send to the API endpoint
for the list ory access control policy roles operation typically these are written to a http.Request
*/
type ListOryAccessControlPolicyRolesParams struct {

	/*Flavor
	  The ORY Access Control Policy flavor. Can be "regex", "glob", and "exact"

	*/
	Flavor string
	/*Limit
	  The maximum amount of policies returned.

	*/
	Limit *int64
	/*Member
	  The member for which the roles are to be listed.

	*/
	Member *string
	/*Offset
	  The offset from where to start looking.

	*/
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) WithTimeout(timeout time.Duration) *ListOryAccessControlPolicyRolesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) WithContext(ctx context.Context) *ListOryAccessControlPolicyRolesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) WithHTTPClient(client *http.Client) *ListOryAccessControlPolicyRolesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlavor adds the flavor to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) WithFlavor(flavor string) *ListOryAccessControlPolicyRolesParams {
	o.SetFlavor(flavor)
	return o
}

// SetFlavor adds the flavor to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) SetFlavor(flavor string) {
	o.Flavor = flavor
}

// WithLimit adds the limit to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) WithLimit(limit *int64) *ListOryAccessControlPolicyRolesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMember adds the member to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) WithMember(member *string) *ListOryAccessControlPolicyRolesParams {
	o.SetMember(member)
	return o
}

// SetMember adds the member to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) SetMember(member *string) {
	o.Member = member
}

// WithOffset adds the offset to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) WithOffset(offset *int64) *ListOryAccessControlPolicyRolesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list ory access control policy roles params
func (o *ListOryAccessControlPolicyRolesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *ListOryAccessControlPolicyRolesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param flavor
	if err := r.SetPathParam("flavor", o.Flavor); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Member != nil {

		// query param member
		var qrMember string
		if o.Member != nil {
			qrMember = *o.Member
		}
		qMember := qrMember
		if qMember != "" {
			if err := r.SetQueryParam("member", qMember); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
