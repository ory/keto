/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * API version:
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// BatchCheckPermissionResult Batch Check Permission Result
type BatchCheckPermissionResult struct {
	// An array of check results. The order aligns with the input order.
	Results []CheckPermissionResultWithError `json:"results"`
}

// NewBatchCheckPermissionResult instantiates a new BatchCheckPermissionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchCheckPermissionResult(results []CheckPermissionResultWithError) *BatchCheckPermissionResult {
	this := BatchCheckPermissionResult{}
	this.Results = results
	return &this
}

// NewBatchCheckPermissionResultWithDefaults instantiates a new BatchCheckPermissionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchCheckPermissionResultWithDefaults() *BatchCheckPermissionResult {
	this := BatchCheckPermissionResult{}
	return &this
}

// GetResults returns the Results field value
func (o *BatchCheckPermissionResult) GetResults() []CheckPermissionResultWithError {
	if o == nil {
		var ret []CheckPermissionResultWithError
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *BatchCheckPermissionResult) GetResultsOk() ([]CheckPermissionResultWithError, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *BatchCheckPermissionResult) SetResults(v []CheckPermissionResultWithError) {
	o.Results = v
}

func (o BatchCheckPermissionResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableBatchCheckPermissionResult struct {
	value *BatchCheckPermissionResult
	isSet bool
}

func (v NullableBatchCheckPermissionResult) Get() *BatchCheckPermissionResult {
	return v.value
}

func (v *NullableBatchCheckPermissionResult) Set(val *BatchCheckPermissionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchCheckPermissionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchCheckPermissionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchCheckPermissionResult(val *BatchCheckPermissionResult) *NullableBatchCheckPermissionResult {
	return &NullableBatchCheckPermissionResult{value: val, isSet: true}
}

func (v NullableBatchCheckPermissionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchCheckPermissionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
