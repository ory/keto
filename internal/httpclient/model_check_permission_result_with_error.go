/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * API version:
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CheckPermissionResultWithError Check Permission Result With Error
type CheckPermissionResultWithError struct {
	// whether the relation tuple is allowed
	Allowed bool `json:"allowed"`
	// any error generated while checking the relation tuple
	Error *string `json:"error,omitempty"`
}

// NewCheckPermissionResultWithError instantiates a new CheckPermissionResultWithError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckPermissionResultWithError(allowed bool) *CheckPermissionResultWithError {
	this := CheckPermissionResultWithError{}
	this.Allowed = allowed
	return &this
}

// NewCheckPermissionResultWithErrorWithDefaults instantiates a new CheckPermissionResultWithError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckPermissionResultWithErrorWithDefaults() *CheckPermissionResultWithError {
	this := CheckPermissionResultWithError{}
	return &this
}

// GetAllowed returns the Allowed field value
func (o *CheckPermissionResultWithError) GetAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Allowed
}

// GetAllowedOk returns a tuple with the Allowed field value
// and a boolean to check if the value has been set.
func (o *CheckPermissionResultWithError) GetAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allowed, true
}

// SetAllowed sets field value
func (o *CheckPermissionResultWithError) SetAllowed(v bool) {
	o.Allowed = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CheckPermissionResultWithError) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckPermissionResultWithError) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CheckPermissionResultWithError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *CheckPermissionResultWithError) SetError(v string) {
	o.Error = &v
}

func (o CheckPermissionResultWithError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["allowed"] = o.Allowed
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableCheckPermissionResultWithError struct {
	value *CheckPermissionResultWithError
	isSet bool
}

func (v NullableCheckPermissionResultWithError) Get() *CheckPermissionResultWithError {
	return v.value
}

func (v *NullableCheckPermissionResultWithError) Set(val *CheckPermissionResultWithError) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckPermissionResultWithError) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckPermissionResultWithError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckPermissionResultWithError(val *CheckPermissionResultWithError) *NullableCheckPermissionResultWithError {
	return &NullableCheckPermissionResultWithError{value: val, isSet: true}
}

func (v NullableCheckPermissionResultWithError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckPermissionResultWithError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
