/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * API version:
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// RelationshipPatchAction  - ACTION_UNSPECIFIED: Unspecified. The `TransactRelationTuples` RPC ignores this RelationTupleDelta if an action was unspecified.  - insert: Insertion of a new RelationTuple. It is ignored if already existing.  - delete: Deletion of the RelationTuple. It is ignored if it does not exist.
type RelationshipPatchAction string

// List of relationshipPatch.Action
const (
	RELATIONSHIPPATCHACTION_ACTION_UNSPECIFIED RelationshipPatchAction = "ACTION_UNSPECIFIED"
	RELATIONSHIPPATCHACTION_INSERT             RelationshipPatchAction = "insert"
	RELATIONSHIPPATCHACTION_DELETE             RelationshipPatchAction = "delete"
)

func (v *RelationshipPatchAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RelationshipPatchAction(value)
	for _, existing := range []RelationshipPatchAction{"ACTION_UNSPECIFIED", "insert", "delete"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelationshipPatchAction", value)
}

// Ptr returns reference to relationshipPatch.Action value
func (v RelationshipPatchAction) Ptr() *RelationshipPatchAction {
	return &v
}

type NullableRelationshipPatchAction struct {
	value *RelationshipPatchAction
	isSet bool
}

func (v NullableRelationshipPatchAction) Get() *RelationshipPatchAction {
	return v.value
}

func (v *NullableRelationshipPatchAction) Set(val *RelationshipPatchAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipPatchAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipPatchAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipPatchAction(val *RelationshipPatchAction) *NullableRelationshipPatchAction {
	return &NullableRelationshipPatchAction{value: val, isSet: true}
}

func (v NullableRelationshipPatchAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipPatchAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
