/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PostCheckOplSyntaxResponse struct for PostCheckOplSyntaxResponse
type PostCheckOplSyntaxResponse struct {
	// The list of syntax errors
	Errors []ParseError `json:"errors,omitempty"`
}

// NewPostCheckOplSyntaxResponse instantiates a new PostCheckOplSyntaxResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCheckOplSyntaxResponse() *PostCheckOplSyntaxResponse {
	this := PostCheckOplSyntaxResponse{}
	return &this
}

// NewPostCheckOplSyntaxResponseWithDefaults instantiates a new PostCheckOplSyntaxResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCheckOplSyntaxResponseWithDefaults() *PostCheckOplSyntaxResponse {
	this := PostCheckOplSyntaxResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *PostCheckOplSyntaxResponse) GetErrors() []ParseError {
	if o == nil || o.Errors == nil {
		var ret []ParseError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCheckOplSyntaxResponse) GetErrorsOk() ([]ParseError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *PostCheckOplSyntaxResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ParseError and assigns it to the Errors field.
func (o *PostCheckOplSyntaxResponse) SetErrors(v []ParseError) {
	o.Errors = v
}

func (o PostCheckOplSyntaxResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullablePostCheckOplSyntaxResponse struct {
	value *PostCheckOplSyntaxResponse
	isSet bool
}

func (v NullablePostCheckOplSyntaxResponse) Get() *PostCheckOplSyntaxResponse {
	return v.value
}

func (v *NullablePostCheckOplSyntaxResponse) Set(val *PostCheckOplSyntaxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCheckOplSyntaxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCheckOplSyntaxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCheckOplSyntaxResponse(val *PostCheckOplSyntaxResponse) *NullablePostCheckOplSyntaxResponse {
	return &NullablePostCheckOplSyntaxResponse{value: val, isSet: true}
}

func (v NullablePostCheckOplSyntaxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCheckOplSyntaxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
