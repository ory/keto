/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * API version:
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RelationshipPatch Write-delta for a TransactRelationTuplesRequest.
type RelationshipPatch struct {
	Action        RelationshipPatchAction `json:"action"`
	RelationTuple Relationship            `json:"relation_tuple"`
}

// NewRelationshipPatch instantiates a new RelationshipPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipPatch(action RelationshipPatchAction, relationTuple Relationship) *RelationshipPatch {
	this := RelationshipPatch{}
	this.Action = action
	this.RelationTuple = relationTuple
	return &this
}

// NewRelationshipPatchWithDefaults instantiates a new RelationshipPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipPatchWithDefaults() *RelationshipPatch {
	this := RelationshipPatch{}
	var action RelationshipPatchAction = RELATIONSHIPPATCHACTION_ACTION_UNSPECIFIED
	this.Action = action
	return &this
}

// GetAction returns the Action field value
func (o *RelationshipPatch) GetAction() RelationshipPatchAction {
	if o == nil {
		var ret RelationshipPatchAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *RelationshipPatch) GetActionOk() (*RelationshipPatchAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *RelationshipPatch) SetAction(v RelationshipPatchAction) {
	o.Action = v
}

// GetRelationTuple returns the RelationTuple field value
func (o *RelationshipPatch) GetRelationTuple() Relationship {
	if o == nil {
		var ret Relationship
		return ret
	}

	return o.RelationTuple
}

// GetRelationTupleOk returns a tuple with the RelationTuple field value
// and a boolean to check if the value has been set.
func (o *RelationshipPatch) GetRelationTupleOk() (*Relationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelationTuple, true
}

// SetRelationTuple sets field value
func (o *RelationshipPatch) SetRelationTuple(v Relationship) {
	o.RelationTuple = v
}

func (o RelationshipPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["relation_tuple"] = o.RelationTuple
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipPatch struct {
	value *RelationshipPatch
	isSet bool
}

func (v NullableRelationshipPatch) Get() *RelationshipPatch {
	return v.value
}

func (v *NullableRelationshipPatch) Set(val *RelationshipPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipPatch(val *RelationshipPatch) *NullableRelationshipPatch {
	return &NullableRelationshipPatch{value: val, isSet: true}
}

func (v NullableRelationshipPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
