syntax = "proto3";
package ory.keto.opl.v1alpha1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option csharp_namespace = "Ory.Keto.Opl.v1alpha1";
option go_package = "github.com/ory/keto/proto/ory/keto/opl/v1alpha1;opl";
option java_multiple_files = true;
option java_outer_classname = "SyntaxServiceProto";
option java_package = "sh.ory.keto.opl.v1alpha1";
option php_namespace = "Ory\\Keto\\Opl\\v1alpha1";

// The service that checks the syntax of an OPL file.
service SyntaxService {
  // Performs a syntax check request.
  rpc Check(CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      post: "/opl/syntax/check"
      body: "content"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "relationship";
      operation_id: "checkOplSyntax";
      responses: {
        key: "200"
        value: {
          description: "The result of the syntax checker"
          schema: {
            json_schema: {ref: ".ory.keto.opl.v1alpha1.CheckResponse"}
          }
        }
      }
    };
  }
}

message CheckRequest {
  bytes content = 1;
}

message CheckResponse {
  repeated ParseError parse_errors = 1;
  repeated ParseError errors = 2;
}

message ParseError {
  string message = 1;
  SourcePosition start = 2;
  SourcePosition end = 3;
}

message SourcePosition {
  uint32 line = 1 [json_name = "Line"];
  uint32 column = 2;
}
