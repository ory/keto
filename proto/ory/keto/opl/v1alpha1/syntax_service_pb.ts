// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file ory/keto/opl/v1alpha1/syntax_service.proto (package ory.keto.opl.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message ory.keto.opl.v1alpha1.CheckRequest
 */
export class CheckRequest extends Message<CheckRequest> {
  /**
   * @generated from field: bytes content = 1;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<CheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ory.keto.opl.v1alpha1.CheckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRequest {
    return new CheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRequest {
    return new CheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRequest {
    return new CheckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckRequest | PlainMessage<CheckRequest> | undefined, b: CheckRequest | PlainMessage<CheckRequest> | undefined): boolean {
    return proto3.util.equals(CheckRequest, a, b);
  }
}

/**
 * @generated from message ory.keto.opl.v1alpha1.CheckResponse
 */
export class CheckResponse extends Message<CheckResponse> {
  /**
   * @generated from field: repeated ory.keto.opl.v1alpha1.ParseError parse_errors = 1;
   */
  parseErrors: ParseError[] = [];

  constructor(data?: PartialMessage<CheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ory.keto.opl.v1alpha1.CheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parse_errors", kind: "message", T: ParseError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse {
    return new CheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckResponse | PlainMessage<CheckResponse> | undefined, b: CheckResponse | PlainMessage<CheckResponse> | undefined): boolean {
    return proto3.util.equals(CheckResponse, a, b);
  }
}

/**
 * @generated from message ory.keto.opl.v1alpha1.ParseError
 */
export class ParseError extends Message<ParseError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: ory.keto.opl.v1alpha1.SourcePosition start = 2;
   */
  start?: SourcePosition;

  /**
   * @generated from field: ory.keto.opl.v1alpha1.SourcePosition end = 3;
   */
  end?: SourcePosition;

  constructor(data?: PartialMessage<ParseError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ory.keto.opl.v1alpha1.ParseError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start", kind: "message", T: SourcePosition },
    { no: 3, name: "end", kind: "message", T: SourcePosition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseError {
    return new ParseError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseError {
    return new ParseError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseError {
    return new ParseError().fromJsonString(jsonString, options);
  }

  static equals(a: ParseError | PlainMessage<ParseError> | undefined, b: ParseError | PlainMessage<ParseError> | undefined): boolean {
    return proto3.util.equals(ParseError, a, b);
  }
}

/**
 * @generated from message ory.keto.opl.v1alpha1.SourcePosition
 */
export class SourcePosition extends Message<SourcePosition> {
  /**
   * @generated from field: uint32 line = 1;
   */
  line = 0;

  /**
   * @generated from field: uint32 column = 2;
   */
  column = 0;

  constructor(data?: PartialMessage<SourcePosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ory.keto.opl.v1alpha1.SourcePosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "column", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourcePosition {
    return new SourcePosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourcePosition {
    return new SourcePosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourcePosition {
    return new SourcePosition().fromJsonString(jsonString, options);
  }

  static equals(a: SourcePosition | PlainMessage<SourcePosition> | undefined, b: SourcePosition | PlainMessage<SourcePosition> | undefined): boolean {
    return proto3.util.equals(SourcePosition, a, b);
  }
}

