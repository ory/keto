// @generated by protoc-gen-es v1.7.2 with parameter "target=dts"
// @generated from file ory/keto/opl/v1alpha1/syntax_service.proto (package ory.keto.opl.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message ory.keto.opl.v1alpha1.CheckRequest
 */
export declare class CheckRequest extends Message<CheckRequest> {
  /**
   * @generated from field: bytes content = 1;
   */
  content: Uint8Array;

  constructor(data?: PartialMessage<CheckRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ory.keto.opl.v1alpha1.CheckRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRequest;

  static equals(a: CheckRequest | PlainMessage<CheckRequest> | undefined, b: CheckRequest | PlainMessage<CheckRequest> | undefined): boolean;
}

/**
 * @generated from message ory.keto.opl.v1alpha1.CheckResponse
 */
export declare class CheckResponse extends Message<CheckResponse> {
  /**
   * @generated from field: repeated ory.keto.opl.v1alpha1.ParseError parse_errors = 1;
   */
  parseErrors: ParseError[];

  constructor(data?: PartialMessage<CheckResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ory.keto.opl.v1alpha1.CheckResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse;

  static equals(a: CheckResponse | PlainMessage<CheckResponse> | undefined, b: CheckResponse | PlainMessage<CheckResponse> | undefined): boolean;
}

/**
 * @generated from message ory.keto.opl.v1alpha1.ParseError
 */
export declare class ParseError extends Message<ParseError> {
  /**
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * @generated from field: ory.keto.opl.v1alpha1.SourcePosition start = 2;
   */
  start?: SourcePosition;

  /**
   * @generated from field: ory.keto.opl.v1alpha1.SourcePosition end = 3;
   */
  end?: SourcePosition;

  constructor(data?: PartialMessage<ParseError>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ory.keto.opl.v1alpha1.ParseError";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseError;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseError;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseError;

  static equals(a: ParseError | PlainMessage<ParseError> | undefined, b: ParseError | PlainMessage<ParseError> | undefined): boolean;
}

/**
 * @generated from message ory.keto.opl.v1alpha1.SourcePosition
 */
export declare class SourcePosition extends Message<SourcePosition> {
  /**
   * @generated from field: uint32 line = 1;
   */
  line: number;

  /**
   * @generated from field: uint32 column = 2;
   */
  column: number;

  constructor(data?: PartialMessage<SourcePosition>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ory.keto.opl.v1alpha1.SourcePosition";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourcePosition;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourcePosition;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourcePosition;

  static equals(a: SourcePosition | PlainMessage<SourcePosition> | undefined, b: SourcePosition | PlainMessage<SourcePosition> | undefined): boolean;
}

