syntax = "proto3";

package ory.keto.acl.v1alpha1;

import "ory/keto/acl/v1alpha1/acl.proto";

option go_package = "github.com/ory/keto/proto/ory/keto/acl/v1alpha1;acl";
option csharp_namespace = "Ory.Keto.Acl.V1Alpha1";
option java_multiple_files = true;
option java_outer_classname = "ExpandServiceProto";
option java_package = "sh.ory.keto.acl.v1alpha1";
option php_namespace = "Ory\\Keto\\Acl\\V1alpha1";

// The service that performs subject set expansion
// based on the stored Access Control Lists.
//
// This service is part of the [read-APIs](../concepts/api-overview.mdx#read-apis).
service ExpandService {
  // Expands the subject set into a tree of subjects.
  rpc Expand(ExpandRequest) returns (ExpandResponse);
}

// The request for an ExpandService.Expand RPC.
// Expands the given subject set.
message ExpandRequest {
  // The subject to expand.
  Subject subject = 1;
  // The maximum depth of tree to build.
  //
  // If the value is less than 1 or greater than the global
  // max-depth then the global max-depth will be used instead.
  //
  // It is important to set this parameter to a meaningful
  // value. Ponder how deep you really want to display this.
  int32 max_depth = 2;
  // This field is not implemented yet and has no effect.
  // <!--
  // Optional. Like reads, a expand is always evaluated at a
  // consistent snapshot no earlier than the given snaptoken.
  //
  // Leave this field blank if you want to expand
  // based on eventually consistent ACLs, benefiting from very
  // low latency, but possibly slightly stale results.
  //
  // If the specified token is too old and no longer known,
  // the server falls back as if no snaptoken had been specified.
  //
  // If not specified the server tries to build the tree
  // on the best snapshot version where it is very likely that
  // ACLs had already been replicated to all availability zones.
  // -->
  string snaptoken = 3;
}

// The response for a ExpandService.Expand RPC.
message ExpandResponse {
  // The tree the requested subject set expands to.
  // The requested subject set is the subject of the root.
  //
  // This field can be nil in some circumstances.
  SubjectTree tree = 1;
}

enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  // This node expands to a union of all children.
  NODE_TYPE_UNION = 1;
  // Not implemented yet.
  NODE_TYPE_EXCLUSION = 2;
  // Not implemented yet.
  NODE_TYPE_INTERSECTION = 3;
  // This node is a leaf and contains no children.
  // Its subject is a `SubjectID` unless `max_depth` was reached.
  NODE_TYPE_LEAF = 4;
}

message SubjectTree {
  // The type of the node.
  NodeType node_type = 1;
  // The subject this node represents.
  Subject subject = 2;
  // The children of this node.
  //
  // This is never set if `node_type` == `NODE_TYPE_LEAF`.
  repeated SubjectTree children = 3;
}
