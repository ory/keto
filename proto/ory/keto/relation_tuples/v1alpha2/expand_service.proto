syntax = "proto3";

package ory.keto.relation_tuples.v1alpha2;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/visibility.proto";
import "ory/keto/relation_tuples/v1alpha2/relation_tuples.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option csharp_namespace = "Ory.Keto.RelationTuples.v1alpha2";
option go_package = "github.com/ory/keto/proto/ory/keto/relation_tuples/v1alpha2;rts";
option java_multiple_files = true;
option java_outer_classname = "ExpandServiceProto";
option java_package = "sh.ory.keto.relation_tuples.v1alpha2";
option php_namespace = "Ory\\Keto\\RelationTuples\\v1alpha2";

// The service that performs subject set expansion
// based on the stored Access Control Lists.
//
// This service is part of the [read-APIs](../concepts/25_api-overview.mdx#read-apis).
service ExpandService {
  // Expands the subject set into a tree of subjects.
  rpc Expand(ExpandRequest) returns (ExpandResponse) {
    option (google.api.http) = {
      get: "/relation-tuples/expand"
      response_body: "tree"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      consumes: "application/json"
      tags: "permission";
      operation_id: "expandPermissions";
      responses: {
        key: "200"
        value: {
          description: "The response of the permission check, in case it is allowed. For the `/openapi` endpoints, the status code is always 200."
          schema: {
            json_schema: {ref: ".ory.keto.relation_tuples.v1alpha2.SubjectTree"}
          }
        }
      }
      responses: {
        key: "400";
        value: {
          description: "errorGeneric";
          schema: {
            json_schema: {ref: ".ory.keto.relation_tuples.v1alpha2.ErrorResponse"}
          }
        };
      };
      responses: {
        key: "default";
        value: {
          description: "errorGeneric";
          schema: {
            json_schema: {ref: ".ory.keto.relation_tuples.v1alpha2.ErrorResponse"}
          }
        };
      };
    };
  }
}

// The request for an ExpandService.Expand RPC.
// Expands the given subject set.
message ExpandRequest {
  // The subject to expand.
  Subject subject = 1 [(google.api.field_visibility).restriction = "NO_SWAGGER"];

  // The maximum depth of tree to build.
  //
  // If the value is less than 1 or greater than the global
  // max-depth then the global max-depth will be used instead.
  //
  // It is important to set this parameter to a meaningful
  // value. Ponder how deep you really want to display this.
  int32 max_depth = 2 [json_name = "max-depth"];

  // This field is not implemented yet and has no effect.
  // <!--
  // Optional. Like reads, a expand is always evaluated at a
  // consistent snapshot no earlier than the given snaptoken.
  //
  // Leave this field blank if you want to expand
  // based on eventually consistent ACLs, benefiting from very
  // low latency, but possibly slightly stale results.
  //
  // If the specified token is too old and no longer known,
  // the server falls back as if no snaptoken had been specified.
  //
  // If not specified the server tries to build the tree
  // on the best snapshot version where it is very likely that
  // ACLs had already been replicated to all availability zones.
  // -->
  string snaptoken = 3 [(google.api.field_visibility).restriction = "NO_SWAGGER"];

  // The following fields are added for compatibility with the existing REST API.

  // The namespace of the object and relation
  // referenced in this subject set.
  string namespace = 4 [
    deprecated = true,
    (google.api.field_behavior) = REQUIRED
  ];
  // The object related by this subject set.
  string object = 5 [
    deprecated = true,
    (google.api.field_behavior) = REQUIRED
  ];
  // The relation between the object and the subjects.
  string relation = 6 [
    deprecated = true,
    (google.api.field_behavior) = REQUIRED
  ];
}

// The response for a ExpandService.Expand RPC.
message ExpandResponse {
  // The tree the requested subject set expands to.
  // The requested subject set is the subject of the root.
  //
  // This field can be nil in some circumstances.
  SubjectTree tree = 1;
}

enum NodeType {
  option allow_alias = true;

  unspecified = 0;
  NODE_TYPE_UNSPECIFIED = 0 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

  // This node expands to a union of all children.
  union = 1;
  NODE_TYPE_UNION = 1 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

  // Not implemented yet.
  exclusion = 2;
  NODE_TYPE_EXCLUSION = 2 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

  // Not implemented yet.
  intersection = 3;
  NODE_TYPE_INTERSECTION = 3 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

  // This node is a leaf and contains no children.
  // Its subject is a `SubjectID` unless `max_depth` was reached.
  leaf = 4;
  NODE_TYPE_LEAF = 4 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

  // This node is a leaf and contains no children.
  // Its subject is a `SubjectID` unless `max_depth` was reached.
  tuple_to_subject_set = 5;
  NODE_TYPE_TUPLE_TO_SUBJECT_SET = 5 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

  // This node is a leaf and contains no children.
  // Its subject is a `SubjectID` unless `max_depth` was reached.
  computed_subject_set = 6;
  NODE_TYPE_COMPUTED_SUBJECT_SET = 6 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

  // This node is a leaf and contains no children.
  // Its subject is a `SubjectID` unless `max_depth` was reached.
  not = 7;
  NODE_TYPE_NOT = 7 [(google.api.value_visibility).restriction = "NO_SWAGGER"];
}

message SubjectTree {
  // The type of the node.
  NodeType node_type = 1 [
    json_name = "type",
    (google.api.field_behavior) = REQUIRED
  ];

  // The subject this node represents.
  // Deprecated: More information is now available in the tuple field.
  Subject subject = 2 [deprecated = true];

  // The relation tuple this node represents.
  RelationTuple tuple = 4;

  // The children of this node.
  //
  // This is never set if `node_type` == `NODE_TYPE_LEAF`.
  repeated SubjectTree children = 3;
}
