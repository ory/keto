syntax = "proto3";

package ory.keto.relation_tuples.v1alpha2;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/visibility.proto";
import "ory/keto/relation_tuples/v1alpha2/relation_tuples.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option csharp_namespace = "Ory.Keto.RelationTuples.v1alpha2";
option go_package = "github.com/ory/keto/proto/ory/keto/relation_tuples/v1alpha2;rts";
option java_multiple_files = true;
option java_outer_classname = "WriteServiceProto";
option java_package = "sh.ory.keto.relation_tuples.v1alpha2";
option php_namespace = "Ory\\Keto\\RelationTuples\\v1alpha2";

// The write service to create and delete Access Control Lists.
//
// This service is part of the [write-APIs](../concepts/25_api-overview.mdx#write-apis).
service WriteService {
  // Writes one or more relationships in a single transaction.
  rpc TransactRelationTuples(TransactRelationTuplesRequest) returns (TransactRelationTuplesResponse) {
    option (google.api.http) = {
      patch: "/admin/relation-tuples"
      body: "relation_tuple_deltas"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "relationship";
      operation_id: "patchRelationships";
      responses: {
        key: "204"
        value: {
          description: "An empty response."
          examples: {
            key: "application/json"
            value: "{}"
          }
        }
      }
      responses: {
        key: "404";
        value: {
          description: "errorGeneric";
          schema: {
            json_schema: {ref: ".ory.keto.relation_tuples.v1alpha2.ErrorResponse"}
          }
        };
      };
    };
  }

  // Creates a relationship
  rpc CreateRelationTuple(CreateRelationTupleRequest) returns (CreateRelationTupleResponse) {
    option (google.api.http) = {
      put: "/admin/relation-tuples"
      body: "relation_tuple"
      response_body: "relation_tuple"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "relationship";
      operation_id: "createRelationship";
      responses: {
        key: "201"
        value: {
          description: "The created relationship."
          schema: {
            json_schema: {ref: ".ory.keto.relation_tuples.v1alpha2.RelationTuple"}
          }
        }
      }
    };
  }

  // Deletes relationships based on relation query
  rpc DeleteRelationTuples(DeleteRelationTuplesRequest) returns (DeleteRelationTuplesResponse) {
    option (google.api.http) = {delete: "/admin/relation-tuples"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      consumes: "application/x-www-form-urlencoded";
      tags: "relationship";
      operation_id: "deleteRelationships";
      responses: {
        key: "204"
        value: {description: "An empty response."}
      }
    };
  }
}

// The request of a WriteService.TransactRelationTuples RPC.
message TransactRelationTuplesRequest {
  // The write delta for the relationships operated in one single transaction.
  // Either all actions succeed or no change takes effect on error.
  repeated RelationTupleDelta relation_tuple_deltas = 1;
}

// Write-delta for a TransactRelationTuplesRequest.
message RelationTupleDelta {
  enum Action {
    option allow_alias = true;

    // Unspecified.
    // The `TransactRelationTuples` RPC ignores this
    // RelationTupleDelta if an action was unspecified.
    ACTION_UNSPECIFIED = 0;

    // Insertion of a new RelationTuple.
    // It is ignored if already existing.
    ACTION_INSERT = 1 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

    // Insertion of a new RelationTuple.
    // It is ignored if already existing.
    insert = 1;

    // Deletion of the RelationTuple.
    // It is ignored if it does not exist.
    ACTION_DELETE = 2 [(google.api.value_visibility).restriction = "NO_SWAGGER"];

    // Deletion of the RelationTuple.
    // It is ignored if it does not exist.
    delete = 2;
  }
  // The action to do on the RelationTuple.
  Action action = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).enum = {
      in: [
        1,
        2
      ]
    }
  ];

  // The target RelationTuple.
  RelationTuple relation_tuple = 2 [
    json_name = "relation_tuple",
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).message.required = true
  ];
}

// The response of a WriteService.TransactRelationTuples rpc.
message TransactRelationTuplesResponse {
  // This field is not implemented yet and has no effect.
  // <!--
  // The list of the new latest snapshot tokens of the affected RelationTuple,
  // with the same index as specified in the `relation_tuple_deltas` field of
  // the TransactRelationTuplesRequest request.
  //
  // If the RelationTupleDelta_Action was DELETE
  // the snaptoken is empty at the same index.
  // -->
  repeated string snaptokens = 1 [(google.api.field_visibility).restriction = "NO_SWAGGER"];
}

// The request to create a new relationship.
message CreateRelationTupleRequest {
  message Relationship {
    // The namespace this relation tuple lives in.
    string namespace = 1;

    // The object related by this tuple.
    // It is an object in the namespace of the tuple.
    string object = 2;

    // The relation between an Object and a Subject.
    string relation = 3;

    oneof subject {
      //      option (validate.required) = true;

      // A concrete id of the subject.
      string subject_id = 5 [json_name = "subject_id"];
      // A subject set that expands to more Subjects.
      // More information are available under [concepts](../concepts/subjects.mdx).
      SubjectSet subject_set = 6 [json_name = "subject_set"];
    }
  }
  // The relationship to create.
  Relationship relation_tuple = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).message.required = true
  ];
}

// The response from creating a new relationship.
message CreateRelationTupleResponse {
  // The created relationship.
  RelationTuple relation_tuple = 1;
}

message DeleteRelationTuplesRequest {
  // The query for deleting relationships
  message Query {
    // Optional. The namespace to query.
    string namespace = 1;
    // Optional. The object to query for.
    string object = 2;
    // Optional. The relation to query for.
    string relation = 3;
    // Optional. The subject to query for.
    Subject subject = 4;
  }

  Query query = 1 [
    deprecated = true,
    (google.api.field_visibility).restriction = "NO_SWAGGER"
  ];

  RelationQuery relation_query = 2 [(google.api.field_visibility).restriction = "NO_SWAGGER"];

  // The namespace this relation tuple lives in.
  string namespace = 3 [deprecated = true];

  // The object related by this tuple.
  // It is an object in the namespace of the tuple.
  string object = 4 [deprecated = true];

  // The relation between an Object and a Subject.
  string relation = 5 [deprecated = true];

  oneof rest_api_subject {
    // A concrete id of the subject.
    string subject_id = 6 [
      deprecated = true,
      json_name = "subject_id"
    ];
    // A subject set that expands to more Subjects.
    // More information are available under [concepts](../concepts/subjects.mdx).
    SubjectSetQuery subject_set = 7 [
      deprecated = true,
      json_name = "subject_set"
    ];
  }
}

message DeleteRelationTuplesResponse {}
