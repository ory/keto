// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file ory/keto/relation_tuples/v1alpha2/read_service.proto (package ory.keto.relation_tuples.v1alpha2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { RelationQuery, RelationTuple, Subject } from "./relation_tuples_pb.js";

/**
 * Request for ReadService.ListRelationTuples RPC.
 * See `ListRelationTuplesRequest_Query` for how to filter the query.
 *
 * @generated from message ory.keto.relation_tuples.v1alpha2.ListRelationTuplesRequest
 */
export class ListRelationTuplesRequest extends Message<ListRelationTuplesRequest> {
  /**
   * All query constraints are concatenated
   * with a logical AND operator.
   *
   * The RelationTuple list from ListRelationTuplesResponse
   * is ordered from the newest RelationTuple to the oldest.
   *
   * @generated from field: ory.keto.relation_tuples.v1alpha2.ListRelationTuplesRequest.Query query = 1 [deprecated = true];
   * @deprecated
   */
  query?: ListRelationTuplesRequest_Query;

  /**
   * @generated from field: ory.keto.relation_tuples.v1alpha2.RelationQuery relation_query = 6;
   */
  relationQuery?: RelationQuery;

  /**
   * This field is not implemented yet and has no effect.
   * <!--
   * Optional. The list of fields to be expanded
   * in the RelationTuple list returned in `ListRelationTuplesResponse`.
   * Leaving this field unspecified means all fields are expanded.
   *
   * Available fields:
   * "object", "relation", "subject",
   * "namespace", "subject.id", "subject.namespace",
   * "subject.object", "subject.relation"
   * -->
   *
   * @generated from field: google.protobuf.FieldMask expand_mask = 2;
   */
  expandMask?: FieldMask;

  /**
   * This field is not implemented yet and has no effect.
   * <!--
   * Optional. The snapshot token for this read.
   * -->
   *
   * @generated from field: string snaptoken = 3;
   */
  snaptoken = "";

  /**
   * Optional. The maximum number of
   * RelationTuples to return in the response.
   *
   * Default: 100
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize = 0;

  /**
   * Optional. An opaque pagination token returned from
   * a previous call to `ListRelationTuples` that
   * indicates where the page should start at.
   *
   * An empty token denotes the first page. All successive
   * pages require the token from the previous page.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListRelationTuplesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ory.keto.relation_tuples.v1alpha2.ListRelationTuplesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: ListRelationTuplesRequest_Query },
    { no: 6, name: "relation_query", kind: "message", T: RelationQuery },
    { no: 2, name: "expand_mask", kind: "message", T: FieldMask },
    { no: 3, name: "snaptoken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRelationTuplesRequest {
    return new ListRelationTuplesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRelationTuplesRequest {
    return new ListRelationTuplesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRelationTuplesRequest {
    return new ListRelationTuplesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRelationTuplesRequest | PlainMessage<ListRelationTuplesRequest> | undefined, b: ListRelationTuplesRequest | PlainMessage<ListRelationTuplesRequest> | undefined): boolean {
    return proto3.util.equals(ListRelationTuplesRequest, a, b);
  }
}

/**
 * The query for listing relationships.
 * Clients can specify any optional field to
 * partially filter for specific relationships.
 *
 * Example use cases (namespace is always required):
 *  - object only: display a list of all permissions referring to a specific object
 *  - relation only: get all groups that have members; get all directories that have content
 *  - object & relation: display all subjects that have a specific permission relation
 *  - subject & relation: display all groups a subject belongs to; display all objects a subject has access to
 *  - object & relation & subject: check whether the relation tuple already exists
 *
 *
 * @generated from message ory.keto.relation_tuples.v1alpha2.ListRelationTuplesRequest.Query
 */
export class ListRelationTuplesRequest_Query extends Message<ListRelationTuplesRequest_Query> {
  /**
   * Required. The namespace to query.
   *
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * Optional. The object to query for.
   *
   * @generated from field: string object = 2;
   */
  object = "";

  /**
   * Optional. The relation to query for.
   *
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * Optional. The subject to query for.
   *
   * @generated from field: ory.keto.relation_tuples.v1alpha2.Subject subject = 4;
   */
  subject?: Subject;

  constructor(data?: PartialMessage<ListRelationTuplesRequest_Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ory.keto.relation_tuples.v1alpha2.ListRelationTuplesRequest.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject", kind: "message", T: Subject },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRelationTuplesRequest_Query {
    return new ListRelationTuplesRequest_Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRelationTuplesRequest_Query {
    return new ListRelationTuplesRequest_Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRelationTuplesRequest_Query {
    return new ListRelationTuplesRequest_Query().fromJsonString(jsonString, options);
  }

  static equals(a: ListRelationTuplesRequest_Query | PlainMessage<ListRelationTuplesRequest_Query> | undefined, b: ListRelationTuplesRequest_Query | PlainMessage<ListRelationTuplesRequest_Query> | undefined): boolean {
    return proto3.util.equals(ListRelationTuplesRequest_Query, a, b);
  }
}

/**
 * The response of a ReadService.ListRelationTuples RPC.
 *
 * @generated from message ory.keto.relation_tuples.v1alpha2.ListRelationTuplesResponse
 */
export class ListRelationTuplesResponse extends Message<ListRelationTuplesResponse> {
  /**
   * The relationships matching the list request.
   *
   * @generated from field: repeated ory.keto.relation_tuples.v1alpha2.RelationTuple relation_tuples = 1;
   */
  relationTuples: RelationTuple[] = [];

  /**
   * The token required to get the next page.
   * If this is the last page, the token will be the empty string.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListRelationTuplesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ory.keto.relation_tuples.v1alpha2.ListRelationTuplesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relation_tuples", kind: "message", T: RelationTuple, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRelationTuplesResponse {
    return new ListRelationTuplesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRelationTuplesResponse {
    return new ListRelationTuplesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRelationTuplesResponse {
    return new ListRelationTuplesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRelationTuplesResponse | PlainMessage<ListRelationTuplesResponse> | undefined, b: ListRelationTuplesResponse | PlainMessage<ListRelationTuplesResponse> | undefined): boolean {
    return proto3.util.equals(ListRelationTuplesResponse, a, b);
  }
}

