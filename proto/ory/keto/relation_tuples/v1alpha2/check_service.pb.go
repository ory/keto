// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: ory/keto/relation_tuples/v1alpha2/check_service.proto

package rts

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request for a CheckService.Check RPC.
// Checks whether a specific subject is related to an object.
type CheckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The namespace to evaluate the check.
	//
	// Note: If you use the expand-API and the check
	// evaluates a RelationTuple specifying a SubjectSet as
	// subject or due to a rewrite rule in a namespace config
	// this check request may involve other namespaces automatically.
	//
	// Deprecated: Marked as deprecated in ory/keto/relation_tuples/v1alpha2/check_service.proto.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The related object in this check.
	//
	// Deprecated: Marked as deprecated in ory/keto/relation_tuples/v1alpha2/check_service.proto.
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// The relation between the Object and the Subject.
	//
	// Deprecated: Marked as deprecated in ory/keto/relation_tuples/v1alpha2/check_service.proto.
	Relation string `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	// The related subject in this check.
	//
	// Deprecated: Marked as deprecated in ory/keto/relation_tuples/v1alpha2/check_service.proto.
	Subject *Subject       `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Tuple   *RelationTuple `protobuf:"bytes,8,opt,name=tuple,proto3" json:"tuple,omitempty"`
	// This field is not implemented yet and has no effect.
	// <!--
	// Set this field to `true` in case your application
	// needs to authorize depending on up to date ACLs,
	// also called a "content-change check".
	//
	// If set to `true` the `snaptoken` field is ignored,
	// the check is evaluated at the latest snapshot
	// (globally consistent) and the response includes a
	// snaptoken for clients to store along with object
	// contents that can be used for subsequent checks
	// of the same content version.
	//
	// Example use case:
	//   - You need to authorize a user to modify/delete some resource
	//     and it is unacceptable that if the permission to do that had
	//     just been revoked some seconds ago so that the change had not
	//     yet been fully replicated to all availability zones.
	//
	// -->
	Latest bool `protobuf:"varint,5,opt,name=latest,proto3" json:"latest,omitempty"`
	// This field is not implemented yet and has no effect.
	// <!--
	// Optional. Like reads, a check is always evaluated at a
	// consistent snapshot no earlier than the given snaptoken.
	//
	// Leave this field blank if you want to evaluate the check
	// based on eventually consistent ACLs, benefiting from very
	// low latency, but possibly slightly stale results.
	//
	// If the specified token is too old and no longer known,
	// the server falls back as if no snaptoken had been specified.
	//
	// If not specified the server tries to evaluate the check
	// on the best snapshot version where it is very likely that
	// ACLs had already been replicated to all availability zones.
	// -->
	Snaptoken string `protobuf:"bytes,6,opt,name=snaptoken,proto3" json:"snaptoken,omitempty"`
	// The maximum depth to search for a relation.
	//
	// If the value is less than 1 or greater than the global
	// max-depth then the global max-depth will be used instead.
	MaxDepth      int32 `protobuf:"varint,7,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in ory/keto/relation_tuples/v1alpha2/check_service.proto.
func (x *CheckRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Deprecated: Marked as deprecated in ory/keto/relation_tuples/v1alpha2/check_service.proto.
func (x *CheckRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

// Deprecated: Marked as deprecated in ory/keto/relation_tuples/v1alpha2/check_service.proto.
func (x *CheckRequest) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

// Deprecated: Marked as deprecated in ory/keto/relation_tuples/v1alpha2/check_service.proto.
func (x *CheckRequest) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *CheckRequest) GetTuple() *RelationTuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *CheckRequest) GetLatest() bool {
	if x != nil {
		return x.Latest
	}
	return false
}

func (x *CheckRequest) GetSnaptoken() string {
	if x != nil {
		return x.Snaptoken
	}
	return ""
}

func (x *CheckRequest) GetMaxDepth() int32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

// The response for a CheckService.Check rpc.
type CheckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the specified subject (id)
	// is related to the requested object.
	//
	// It is false by default if no ACL matches.
	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// This field is not implemented yet and has no effect.
	// <!--
	// The last known snapshot token ONLY specified if
	// the request had not specified a snaptoken,
	// since this performed a "content-change request"
	// and consistently fetched the last known snapshot token.
	//
	// This field is not set if the request had specified a snaptoken!
	//
	// If set, clients should cache and use this token
	// for subsequent requests to have minimal latency,
	// but allow slightly stale responses (only some milliseconds or seconds).
	// -->
	Snaptoken     string `protobuf:"bytes,2,opt,name=snaptoken,proto3" json:"snaptoken,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescGZIP(), []int{1}
}

func (x *CheckResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *CheckResponse) GetSnaptoken() string {
	if x != nil {
		return x.Snaptoken
	}
	return ""
}

// The response for an individual check in the CheckService.BatchCheck rpc.
type CheckResponseWithError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the specified subject (id)
	// is related to the requested object.
	//
	// It is false by default if no ACL matches.
	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// If there was an error checking the tuple,
	// this will contain the error message.
	//
	// If the check was performed successfully, this will be empty.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This field is not implemented yet and has no effect.
	// <!--
	// The last known snapshot token ONLY specified if
	// the request had not specified a snaptoken,
	// since this performed a "content-change request"
	// and consistently fetched the last known snapshot token.
	//
	// This field is not set if the request had specified a snaptoken!
	//
	// If set, clients should cache and use this token
	// for subsequent requests to have minimal latency,
	// but allow slightly stale responses (only some milliseconds or seconds).
	// -->
	Snaptoken     string `protobuf:"bytes,3,opt,name=snaptoken,proto3" json:"snaptoken,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckResponseWithError) Reset() {
	*x = CheckResponseWithError{}
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckResponseWithError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponseWithError) ProtoMessage() {}

func (x *CheckResponseWithError) ProtoReflect() protoreflect.Message {
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponseWithError.ProtoReflect.Descriptor instead.
func (*CheckResponseWithError) Descriptor() ([]byte, []int) {
	return file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescGZIP(), []int{2}
}

func (x *CheckResponseWithError) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *CheckResponseWithError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CheckResponseWithError) GetSnaptoken() string {
	if x != nil {
		return x.Snaptoken
	}
	return ""
}

// The request for a CheckService.BatchCheck RPC.
// Checks a batch of relations.
type BatchCheckRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Tuples []*RelationTuple       `protobuf:"bytes,1,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// This field is not implemented yet and has no effect.
	// <!--
	// Set this field to `true` in case your application
	// needs to authorize depending on up to date ACLs,
	// also called a "content-change check".
	//
	// If set to `true` the `snaptoken` field is ignored,
	// the check is evaluated at the latest snapshot
	// (globally consistent) and the response includes a
	// snaptoken for clients to store along with object
	// contents that can be used for subsequent checks
	// of the same content version.
	//
	// Example use case:
	//   - You need to authorize a user to modify/delete some resource
	//     and it is unacceptable that if the permission to do that had
	//     just been revoked some seconds ago so that the change had not
	//     yet been fully replicated to all availability zones.
	//
	// -->
	Latest bool `protobuf:"varint,2,opt,name=latest,proto3" json:"latest,omitempty"`
	// This field is not implemented yet and has no effect.
	// <!--
	// Optional. Like reads, a check is always evaluated at a
	// consistent snapshot no earlier than the given snaptoken.
	//
	// Leave this field blank if you want to evaluate the check
	// based on eventually consistent ACLs, benefiting from very
	// low latency, but possibly slightly stale results.
	//
	// If the specified token is too old and no longer known,
	// the server falls back as if no snaptoken had been specified.
	//
	// If not specified the server tries to evaluate the check
	// on the best snapshot version where it is very likely that
	// ACLs had already been replicated to all availability zones.
	// -->
	Snaptoken string `protobuf:"bytes,3,opt,name=snaptoken,proto3" json:"snaptoken,omitempty"`
	// The maximum depth to search for a relation.
	//
	// If the value is less than 1 or greater than the global
	// max-depth then the global max-depth will be used instead.
	MaxDepth      int32 `protobuf:"varint,4,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCheckRequest) Reset() {
	*x = BatchCheckRequest{}
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckRequest) ProtoMessage() {}

func (x *BatchCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckRequest.ProtoReflect.Descriptor instead.
func (*BatchCheckRequest) Descriptor() ([]byte, []int) {
	return file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescGZIP(), []int{3}
}

func (x *BatchCheckRequest) GetTuples() []*RelationTuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *BatchCheckRequest) GetLatest() bool {
	if x != nil {
		return x.Latest
	}
	return false
}

func (x *BatchCheckRequest) GetSnaptoken() string {
	if x != nil {
		return x.Snaptoken
	}
	return ""
}

func (x *BatchCheckRequest) GetMaxDepth() int32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

// The response for a CheckService.BatchCheck rpc.
type BatchCheckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The results of the batch check. The order of these
	// results will match the order of the input.
	Results       []*CheckResponseWithError `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCheckResponse) Reset() {
	*x = BatchCheckResponse{}
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckResponse) ProtoMessage() {}

func (x *BatchCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckResponse.ProtoReflect.Descriptor instead.
func (*BatchCheckResponse) Descriptor() ([]byte, []int) {
	return file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCheckResponse) GetResults() []*CheckResponseWithError {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_ory_keto_relation_tuples_v1alpha2_check_service_proto protoreflect.FileDescriptor

const file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDesc = "" +
	"\n" +
	"5ory/keto/relation_tuples/v1alpha2/check_service.proto\x12!ory.keto.relation_tuples.v1alpha2\x1a7ory/keto/relation_tuples/v1alpha2/relation_tuples.proto\"\xd1\x02\n" +
	"\fCheckRequest\x12 \n" +
	"\tnamespace\x18\x01 \x01(\tB\x02\x18\x01R\tnamespace\x12\x1a\n" +
	"\x06object\x18\x02 \x01(\tB\x02\x18\x01R\x06object\x12\x1e\n" +
	"\brelation\x18\x03 \x01(\tB\x02\x18\x01R\brelation\x12H\n" +
	"\asubject\x18\x04 \x01(\v2*.ory.keto.relation_tuples.v1alpha2.SubjectB\x02\x18\x01R\asubject\x12F\n" +
	"\x05tuple\x18\b \x01(\v20.ory.keto.relation_tuples.v1alpha2.RelationTupleR\x05tuple\x12\x16\n" +
	"\x06latest\x18\x05 \x01(\bR\x06latest\x12\x1c\n" +
	"\tsnaptoken\x18\x06 \x01(\tR\tsnaptoken\x12\x1b\n" +
	"\tmax_depth\x18\a \x01(\x05R\bmaxDepth\"G\n" +
	"\rCheckResponse\x12\x18\n" +
	"\aallowed\x18\x01 \x01(\bR\aallowed\x12\x1c\n" +
	"\tsnaptoken\x18\x02 \x01(\tR\tsnaptoken\"f\n" +
	"\x16CheckResponseWithError\x12\x18\n" +
	"\aallowed\x18\x01 \x01(\bR\aallowed\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\x1c\n" +
	"\tsnaptoken\x18\x03 \x01(\tR\tsnaptoken\"\xb0\x01\n" +
	"\x11BatchCheckRequest\x12H\n" +
	"\x06tuples\x18\x01 \x03(\v20.ory.keto.relation_tuples.v1alpha2.RelationTupleR\x06tuples\x12\x16\n" +
	"\x06latest\x18\x02 \x01(\bR\x06latest\x12\x1c\n" +
	"\tsnaptoken\x18\x03 \x01(\tR\tsnaptoken\x12\x1b\n" +
	"\tmax_depth\x18\x04 \x01(\x05R\bmaxDepth\"i\n" +
	"\x12BatchCheckResponse\x12S\n" +
	"\aresults\x18\x01 \x03(\v29.ory.keto.relation_tuples.v1alpha2.CheckResponseWithErrorR\aresults2\xf5\x01\n" +
	"\fCheckService\x12j\n" +
	"\x05Check\x12/.ory.keto.relation_tuples.v1alpha2.CheckRequest\x1a0.ory.keto.relation_tuples.v1alpha2.CheckResponse\x12y\n" +
	"\n" +
	"BatchCheck\x124.ory.keto.relation_tuples.v1alpha2.BatchCheckRequest\x1a5.ory.keto.relation_tuples.v1alpha2.BatchCheckResponseB\xc2\x01\n" +
	"$sh.ory.keto.relation_tuples.v1alpha2B\x11CheckServiceProtoP\x01Z?github.com/ory/keto/proto/ory/keto/relation_tuples/v1alpha2;rts\xaa\x02 Ory.Keto.RelationTuples.v1alpha2\xca\x02 Ory\\Keto\\RelationTuples\\v1alpha2b\x06proto3"

var (
	file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescOnce sync.Once
	file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescData []byte
)

func file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescGZIP() []byte {
	file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescOnce.Do(func() {
		file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDesc), len(file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDesc)))
	})
	return file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDescData
}

var file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ory_keto_relation_tuples_v1alpha2_check_service_proto_goTypes = []any{
	(*CheckRequest)(nil),           // 0: ory.keto.relation_tuples.v1alpha2.CheckRequest
	(*CheckResponse)(nil),          // 1: ory.keto.relation_tuples.v1alpha2.CheckResponse
	(*CheckResponseWithError)(nil), // 2: ory.keto.relation_tuples.v1alpha2.CheckResponseWithError
	(*BatchCheckRequest)(nil),      // 3: ory.keto.relation_tuples.v1alpha2.BatchCheckRequest
	(*BatchCheckResponse)(nil),     // 4: ory.keto.relation_tuples.v1alpha2.BatchCheckResponse
	(*Subject)(nil),                // 5: ory.keto.relation_tuples.v1alpha2.Subject
	(*RelationTuple)(nil),          // 6: ory.keto.relation_tuples.v1alpha2.RelationTuple
}
var file_ory_keto_relation_tuples_v1alpha2_check_service_proto_depIdxs = []int32{
	5, // 0: ory.keto.relation_tuples.v1alpha2.CheckRequest.subject:type_name -> ory.keto.relation_tuples.v1alpha2.Subject
	6, // 1: ory.keto.relation_tuples.v1alpha2.CheckRequest.tuple:type_name -> ory.keto.relation_tuples.v1alpha2.RelationTuple
	6, // 2: ory.keto.relation_tuples.v1alpha2.BatchCheckRequest.tuples:type_name -> ory.keto.relation_tuples.v1alpha2.RelationTuple
	2, // 3: ory.keto.relation_tuples.v1alpha2.BatchCheckResponse.results:type_name -> ory.keto.relation_tuples.v1alpha2.CheckResponseWithError
	0, // 4: ory.keto.relation_tuples.v1alpha2.CheckService.Check:input_type -> ory.keto.relation_tuples.v1alpha2.CheckRequest
	3, // 5: ory.keto.relation_tuples.v1alpha2.CheckService.BatchCheck:input_type -> ory.keto.relation_tuples.v1alpha2.BatchCheckRequest
	1, // 6: ory.keto.relation_tuples.v1alpha2.CheckService.Check:output_type -> ory.keto.relation_tuples.v1alpha2.CheckResponse
	4, // 7: ory.keto.relation_tuples.v1alpha2.CheckService.BatchCheck:output_type -> ory.keto.relation_tuples.v1alpha2.BatchCheckResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ory_keto_relation_tuples_v1alpha2_check_service_proto_init() }
func file_ory_keto_relation_tuples_v1alpha2_check_service_proto_init() {
	if File_ory_keto_relation_tuples_v1alpha2_check_service_proto != nil {
		return
	}
	file_ory_keto_relation_tuples_v1alpha2_relation_tuples_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDesc), len(file_ory_keto_relation_tuples_v1alpha2_check_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ory_keto_relation_tuples_v1alpha2_check_service_proto_goTypes,
		DependencyIndexes: file_ory_keto_relation_tuples_v1alpha2_check_service_proto_depIdxs,
		MessageInfos:      file_ory_keto_relation_tuples_v1alpha2_check_service_proto_msgTypes,
	}.Build()
	File_ory_keto_relation_tuples_v1alpha2_check_service_proto = out.File
	file_ory_keto_relation_tuples_v1alpha2_check_service_proto_goTypes = nil
	file_ory_keto_relation_tuples_v1alpha2_check_service_proto_depIdxs = nil
}
