// @generated by protoc-gen-es v1.7.2 with parameter "target=dts"
// @generated from file ory/keto/relation_tuples/v1alpha2/relation_tuples.proto (package ory.keto.relation_tuples.v1alpha2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * RelationTuple defines a relation between an Object and a Subject.
 *
 * @generated from message ory.keto.relation_tuples.v1alpha2.RelationTuple
 */
export declare class RelationTuple extends Message<RelationTuple> {
  /**
   * The namespace this relation tuple lives in.
   *
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * The object related by this tuple.
   * It is an object in the namespace of the tuple.
   *
   * @generated from field: string object = 2;
   */
  object: string;

  /**
   * The relation between an Object and a Subject.
   *
   * @generated from field: string relation = 3;
   */
  relation: string;

  /**
   * The subject related by this tuple.
   * A Subject either represents a concrete subject id or
   * a `SubjectSet` that expands to more Subjects.
   *
   * @generated from field: ory.keto.relation_tuples.v1alpha2.Subject subject = 4;
   */
  subject?: Subject;

  constructor(data?: PartialMessage<RelationTuple>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ory.keto.relation_tuples.v1alpha2.RelationTuple";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationTuple;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationTuple;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationTuple;

  static equals(a: RelationTuple | PlainMessage<RelationTuple> | undefined, b: RelationTuple | PlainMessage<RelationTuple> | undefined): boolean;
}

/**
 * The query for listing relationships.
 * Clients can specify any optional field to
 * partially filter for specific relationships.
 *
 * Example use cases (namespace is always required):
 *  - object only: display a list of all permissions referring to a specific object
 *  - relation only: get all groups that have members; get all directories that have content
 *  - object & relation: display all subjects that have a specific permission relation
 *  - subject & relation: display all groups a subject belongs to; display all objects a subject has access to
 *  - object & relation & subject: check whether the relation tuple already exists
 *
 * @generated from message ory.keto.relation_tuples.v1alpha2.RelationQuery
 */
export declare class RelationQuery extends Message<RelationQuery> {
  /**
   * The namespace this relation tuple lives in.
   *
   * @generated from field: optional string namespace = 1;
   */
  namespace?: string;

  /**
   * The object related by this tuple.
   * It is an object in the namespace of the tuple.
   *
   * @generated from field: optional string object = 2;
   */
  object?: string;

  /**
   * The relation between an Object and a Subject.
   *
   * @generated from field: optional string relation = 3;
   */
  relation?: string;

  /**
   * The subject related by this tuple.
   * A Subject either represents a concrete subject id or
   * a `SubjectSet` that expands to more Subjects.
   *
   * @generated from field: optional ory.keto.relation_tuples.v1alpha2.Subject subject = 4;
   */
  subject?: Subject;

  constructor(data?: PartialMessage<RelationQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ory.keto.relation_tuples.v1alpha2.RelationQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationQuery;

  static equals(a: RelationQuery | PlainMessage<RelationQuery> | undefined, b: RelationQuery | PlainMessage<RelationQuery> | undefined): boolean;
}

/**
 * Subject is either a concrete subject id or
 * a `SubjectSet` expanding to more Subjects.
 *
 * @generated from message ory.keto.relation_tuples.v1alpha2.Subject
 */
export declare class Subject extends Message<Subject> {
  /**
   * The reference of this abstract subject.
   *
   * @generated from oneof ory.keto.relation_tuples.v1alpha2.Subject.ref
   */
  ref: {
    /**
     * A concrete id of the subject.
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * A subject set that expands to more Subjects.
     * More information are available under [concepts](../concepts/15_subjects.mdx).
     *
     * @generated from field: ory.keto.relation_tuples.v1alpha2.SubjectSet set = 2;
     */
    value: SubjectSet;
    case: "set";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Subject>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ory.keto.relation_tuples.v1alpha2.Subject";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subject;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subject;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subject;

  static equals(a: Subject | PlainMessage<Subject> | undefined, b: Subject | PlainMessage<Subject> | undefined): boolean;
}

/**
 * SubjectSet refers to all subjects who have
 * the same `relation` on an `object`.
 *
 * @generated from message ory.keto.relation_tuples.v1alpha2.SubjectSet
 */
export declare class SubjectSet extends Message<SubjectSet> {
  /**
   * The namespace of the object and relation
   * referenced in this subject set.
   *
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * The object related by this subject set.
   *
   * @generated from field: string object = 2;
   */
  object: string;

  /**
   * The relation between the object and the subjects.
   *
   * @generated from field: string relation = 3;
   */
  relation: string;

  constructor(data?: PartialMessage<SubjectSet>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ory.keto.relation_tuples.v1alpha2.SubjectSet";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubjectSet;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubjectSet;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubjectSet;

  static equals(a: SubjectSet | PlainMessage<SubjectSet> | undefined, b: SubjectSet | PlainMessage<SubjectSet> | undefined): boolean;
}

