{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Ory Keto is a cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.",
    "title": "ORY Keto",
    "contact": {
      "name": "ORY",
      "url": "https://www.ory.sh",
      "email": "hi@ory.sh"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/ory/keto/blob/master/LICENSE"
    },
    "version": "Latest"
  },
  "basePath": "/",
  "paths": {
    "/check": {
      "get": {
        "description": "To learn how relation tuples and the check works, head over to [the documentation](/TODO).",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "read"
        ],
        "summary": "Check a relation tuple",
        "operationId": "getCheck",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Object",
            "name": "object",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Relation",
            "name": "relation",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/definitions/subject",
            "x-go-name": "Subject",
            "description": "string encoding of the subject",
            "name": "subject",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "getCheckResponse",
            "schema": {
              "$ref": "#/definitions/getCheckResponse"
            }
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "403": {
            "description": "getCheckResponse",
            "schema": {
              "$ref": "#/definitions/getCheckResponse"
            }
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      },
      "post": {
        "description": "To learn how relation tuples and the check works, head over to [the documentation](/TODO).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "read"
        ],
        "summary": "Check a relation tuple",
        "operationId": "postCheck",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Object",
            "name": "object",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Relation",
            "name": "relation",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/definitions/subject",
            "x-go-name": "Subject",
            "description": "string encoding of the subject",
            "name": "subject",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "getCheckResponse",
            "schema": {
              "$ref": "#/definitions/getCheckResponse"
            }
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "403": {
            "description": "getCheckResponse",
            "schema": {
              "$ref": "#/definitions/getCheckResponse"
            }
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/expand": {
      "get": {
        "description": "Expand a relation tuple",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "read"
        ],
        "operationId": "getExpand",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Object",
            "name": "object",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Relation",
            "name": "relation",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Depth",
            "name": "depth",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "expandTree",
            "schema": {
              "$ref": "#/definitions/expandTree"
            }
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "404": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/health/alive": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running.\nThis status does currently not include checks whether the database connection is working.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check alive status",
        "operationId": "isInstanceAlive",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g.\nthe database) are responsive as well.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check readiness status",
        "operationId": "isInstanceReady",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "503": {
            "description": "healthNotReadyStatus",
            "schema": {
              "$ref": "#/definitions/healthNotReadyStatus"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This endpoint returns the service version typically notated using semantic versioning.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "version"
        ],
        "summary": "Get service version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "version",
            "schema": {
              "$ref": "#/definitions/version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "NodeType": {
      "type": "integer",
      "format": "int64",
      "x-go-name": "SwaggerNodeType",
      "x-go-package": "github.com/ory/keto/internal/expand"
    },
    "expandTree": {
      "type": "object",
      "required": [
        "type",
        "subject"
      ],
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/expandTree"
          },
          "x-go-name": "Children"
        },
        "subject": {
          "$ref": "#/definitions/subject"
        },
        "type": {
          "$ref": "#/definitions/NodeType"
        }
      },
      "x-go-name": "Tree",
      "x-go-package": "github.com/ory/keto/internal/expand"
    },
    "getCheckResponse": {
      "description": "The content of the allowed field is mirrored in the HTTP status code.",
      "type": "object",
      "title": "Represents the response for a check request.",
      "required": [
        "allowed"
      ],
      "properties": {
        "allowed": {
          "description": "whether the relation tuple is allowed",
          "type": "boolean",
          "x-go-name": "Allowed"
        }
      },
      "x-go-name": "RESTResponse",
      "x-go-package": "github.com/ory/keto/internal/check"
    },
    "healthNotReadyStatus": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains a list of errors that caused the not ready status.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Errors"
        }
      },
      "x-go-name": "swaggerNotReadyStatus",
      "x-go-package": "github.com/ory/x/healthx"
    },
    "healthStatus": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Status always contains \"ok\".",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-name": "swaggerHealthStatus",
      "x-go-package": "github.com/ory/x/healthx"
    },
    "subject": {
      "type": "string",
      "properties": {
        "String": {
          "type": "string"
        }
      },
      "x-go-name": "stringEncodedSubject",
      "x-go-package": "github.com/ory/keto/internal/relationtuple"
    },
    "version": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Version is the service's version.",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "swaggerVersion",
      "x-go-package": "github.com/ory/x/healthx"
    }
  },
  "responses": {
    "emptyResponse": {
      "description": "An empty response"
    },
    "genericError": {
      "description": "The standard error format",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "x-go-name": "Details"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "reason": {
            "type": "string",
            "x-go-name": "Reason"
          },
          "request": {
            "type": "string",
            "x-go-name": "Request"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    }
  }
}