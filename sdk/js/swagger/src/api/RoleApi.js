/**
 *
 * Package main ORY Keto
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([
      'ApiClient',
      'model/InlineResponse500',
      'model/Role',
      'model/RoleMembers'
    ], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(
      require('../ApiClient'),
      require('../model/InlineResponse500'),
      require('../model/Role'),
      require('../model/RoleMembers')
    )
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {}
    }
    root.SwaggerJsClient.RoleApi = factory(
      root.SwaggerJsClient.ApiClient,
      root.SwaggerJsClient.InlineResponse500,
      root.SwaggerJsClient.Role,
      root.SwaggerJsClient.RoleMembers
    )
  }
})(this, function(ApiClient, InlineResponse500, Role, RoleMembers) {
  'use strict'

  /**
   * Role service.
   * @module api/RoleApi
   * @version Latest
   */

  /**
   * Constructs a new RoleApi.
   * @alias module:api/RoleApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance

    /**
     * Callback function to receive the result of the addMembersToRole operation.
     * @callback module:api/RoleApi~addMembersToRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add members to a role
     * A Role represents a group of users that share the same role and thus permissions. A role could be an administrator, a moderator, a regular user or some other sort of role.  This endpoint allows you to add members (users, applications, ...) to a specific role. You have to know the role&#39;s ID.
     * @param {String} id The id of the role to modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleMembers} opts.body
     * @param {module:api/RoleApi~addMembersToRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addMembersToRole = function(id, opts, callback) {
      opts = opts || {}
      var postBody = opts['body']

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error(
          "Missing the required parameter 'id' when calling addMembersToRole"
        )
      }

      var pathParams = {
        id: id
      }
      var queryParams = {}
      var headerParams = {}
      var formParams = {}

      var authNames = []
      var contentTypes = ['application/json']
      var accepts = ['application/json']
      var returnType = null

      return this.apiClient.callApi(
        '/roles/{id}/members',
        'POST',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      )
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/RoleApi~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role
     * A Role represents a group of users that share the same role and thus permissions. A role could be an administrator, a moderator, a regular user or some other sort of role.  This endpoint allows you to create a new role. You may define members as well but you don&#39;t have to.
     * @param {Object} opts Optional parameters
     * @param {module:model/Role} opts.body
     * @param {module:api/RoleApi~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.createRole = function(opts, callback) {
      opts = opts || {}
      var postBody = opts['body']

      var pathParams = {}
      var queryParams = {}
      var headerParams = {}
      var formParams = {}

      var authNames = []
      var contentTypes = ['application/json']
      var accepts = ['application/json']
      var returnType = Role

      return this.apiClient.callApi(
        '/roles',
        'POST',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      )
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/RoleApi~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role by its ID
     * A Role represents a group of users that share the same role and thus permissions. A role could be an administrator, a moderator, a regular user or some other sort of role.  This endpoint allows you to delete an existing role. You have to know the role&#39;s ID.
     * @param {String} id The id of the role to look up.
     * @param {module:api/RoleApi~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRole = function(id, callback) {
      var postBody = null

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error(
          "Missing the required parameter 'id' when calling deleteRole"
        )
      }

      var pathParams = {
        id: id
      }
      var queryParams = {}
      var headerParams = {}
      var formParams = {}

      var authNames = []
      var contentTypes = ['application/json']
      var accepts = ['application/json']
      var returnType = null

      return this.apiClient.callApi(
        '/roles/{id}',
        'DELETE',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      )
    }

    /**
     * Callback function to receive the result of the getRole operation.
     * @callback module:api/RoleApi~getRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role by its ID
     * A Role represents a group of users that share the same role and thus permissions. A role could be an administrator, a moderator, a regular user or some other sort of role.  This endpoint allows you to retrieve an existing role. You have to know the role&#39;s ID.
     * @param {String} id The id of the role to look up.
     * @param {module:api/RoleApi~getRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.getRole = function(id, callback) {
      var postBody = null

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error(
          "Missing the required parameter 'id' when calling getRole"
        )
      }

      var pathParams = {
        id: id
      }
      var queryParams = {}
      var headerParams = {}
      var formParams = {}

      var authNames = []
      var contentTypes = ['application/json']
      var accepts = ['application/json']
      var returnType = Role

      return this.apiClient.callApi(
        '/roles/{id}',
        'GET',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      )
    }

    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback module:api/RoleApi~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all roles
     * A Role represents a group of users that share the same role and thus permissions. A role could be an administrator, a moderator, a regular user or some other sort of role.  This endpoint allows you to retrieve all roles that are stored in the system.
     * @param {Object} opts Optional parameters
     * @param {String} opts.member The id of the member to look up.
     * @param {Number} opts.limit The maximum amount of policies returned.
     * @param {Number} opts.offset The offset from where to start looking.
     * @param {module:api/RoleApi~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    this.listRoles = function(opts, callback) {
      opts = opts || {}
      var postBody = null

      var pathParams = {}
      var queryParams = {
        member: opts['member'],
        limit: opts['limit'],
        offset: opts['offset']
      }
      var headerParams = {}
      var formParams = {}

      var authNames = []
      var contentTypes = ['application/json']
      var accepts = ['application/json']
      var returnType = [Role]

      return this.apiClient.callApi(
        '/roles',
        'GET',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      )
    }

    /**
     * Callback function to receive the result of the removeMembersFromRole operation.
     * @callback module:api/RoleApi~removeMembersFromRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove members from a role
     * A Role represents a group of users that share the same role and thus permissions. A role could be an administrator, a moderator, a regular user or some other sort of role.  This endpoint allows you to remove members (users, applications, ...) from a specific role. You have to know the role&#39;s ID.
     * @param {String} id The id of the role to modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleMembers} opts.body
     * @param {module:api/RoleApi~removeMembersFromRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeMembersFromRole = function(id, opts, callback) {
      opts = opts || {}
      var postBody = opts['body']

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error(
          "Missing the required parameter 'id' when calling removeMembersFromRole"
        )
      }

      var pathParams = {
        id: id
      }
      var queryParams = {}
      var headerParams = {}
      var formParams = {}

      var authNames = []
      var contentTypes = ['application/json']
      var accepts = ['application/json']
      var returnType = null

      return this.apiClient.callApi(
        '/roles/{id}/members',
        'DELETE',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      )
    }

    /**
     * Callback function to receive the result of the setRole operation.
     * @callback module:api/RoleApi~setRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A Role represents a group of users that share the same role and thus permissions. A role could be an administrator, a moderator, a regular user or some other sort of role.
     * This endpoint allows you to overwrite a role. You have to know the role&#39;s ID.
     * @param {module:api/RoleApi~setRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setRole = function(callback) {
      var postBody = null

      var pathParams = {}
      var queryParams = {}
      var headerParams = {}
      var formParams = {}

      var authNames = []
      var contentTypes = ['application/json']
      var accepts = ['application/json']
      var returnType = null

      return this.apiClient.callApi(
        '/roles/{id}',
        'PUT',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      )
    }
  }

  return exports
})
