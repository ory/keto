<?php
/**
 * WardenApi
 * PHP version 5
 *
 * @category Class
 * @package  keto\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Package main ORY Keto
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace keto\SDK\Api;

use \keto\SDK\ApiClient;
use \keto\SDK\ApiException;
use \keto\SDK\Configuration;
use \keto\SDK\ObjectSerializer;

/**
 * WardenApi Class Doc Comment
 *
 * @category Class
 * @package  keto\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WardenApi
{
    /**
     * API Client
     *
     * @var \keto\SDK\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \keto\SDK\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\keto\SDK\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \keto\SDK\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \keto\SDK\ApiClient $apiClient set the API client
     *
     * @return WardenApi
     */
    public function setApiClient(\keto\SDK\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation isOAuth2AccessTokenAuthorized
     *
     * Check if an OAuth 2.0 access token is authorized to access a resource
     *
     * Client for keto
     *
     * @param \keto\SDK\Model\WardenOAuth2AccessTokenAuthorizationRequest $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\WardenOAuth2AccessTokenAuthorizationResponse
     */
    public function isOAuth2AccessTokenAuthorized($body = null)
    {
        list($response) = $this->isOAuth2AccessTokenAuthorizedWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation isOAuth2AccessTokenAuthorizedWithHttpInfo
     *
     * Check if an OAuth 2.0 access token is authorized to access a resource
     *
     * Client for keto
     *
     * @param \keto\SDK\Model\WardenOAuth2AccessTokenAuthorizationRequest $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\WardenOAuth2AccessTokenAuthorizationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function isOAuth2AccessTokenAuthorizedWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/warden/oauth2/access-tokens/authorize";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\WardenOAuth2AccessTokenAuthorizationResponse',
                '/warden/oauth2/access-tokens/authorize'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\WardenOAuth2AccessTokenAuthorizationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\WardenOAuth2AccessTokenAuthorizationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation isOAuth2ClientAuthorized
     *
     * Check if an OAuth 2.0 Client is authorized to access a resource
     *
     * Client for keto
     *
     * @param \keto\SDK\Model\WardenOAuth2ClientAuthorizationRequest $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\WardenOAuth2ClientAuthorizationResponse
     */
    public function isOAuth2ClientAuthorized($body = null)
    {
        list($response) = $this->isOAuth2ClientAuthorizedWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation isOAuth2ClientAuthorizedWithHttpInfo
     *
     * Check if an OAuth 2.0 Client is authorized to access a resource
     *
     * Client for keto
     *
     * @param \keto\SDK\Model\WardenOAuth2ClientAuthorizationRequest $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\WardenOAuth2ClientAuthorizationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function isOAuth2ClientAuthorizedWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/warden/oauth2/clients/authorize";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\WardenOAuth2ClientAuthorizationResponse',
                '/warden/oauth2/clients/authorize'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\WardenOAuth2ClientAuthorizationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\WardenOAuth2ClientAuthorizationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation isSubjectAuthorized
     *
     * Check if a subject is authorized to access a resource
     *
     * Client for keto
     *
     * @param \keto\SDK\Model\WardenSubjectAuthorizationRequest $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\WardenSubjectAuthorizationResponse
     */
    public function isSubjectAuthorized($body = null)
    {
        list($response) = $this->isSubjectAuthorizedWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation isSubjectAuthorizedWithHttpInfo
     *
     * Check if a subject is authorized to access a resource
     *
     * Client for keto
     *
     * @param \keto\SDK\Model\WardenSubjectAuthorizationRequest $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\WardenSubjectAuthorizationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function isSubjectAuthorizedWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/warden/subjects/authorize";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\WardenSubjectAuthorizationResponse',
                '/warden/subjects/authorize'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\WardenSubjectAuthorizationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\WardenSubjectAuthorizationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
