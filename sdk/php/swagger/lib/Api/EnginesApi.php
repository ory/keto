<?php
/**
 * EnginesApi
 * PHP version 5
 *
 * @category Class
 * @package  keto\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ORY Keto
 *
 * A cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.sh
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace keto\SDK\Api;

use \keto\SDK\ApiClient;
use \keto\SDK\ApiException;
use \keto\SDK\Configuration;
use \keto\SDK\ObjectSerializer;

/**
 * EnginesApi Class Doc Comment
 *
 * @category Class
 * @package  keto\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnginesApi
{
    /**
     * API Client
     *
     * @var \keto\SDK\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \keto\SDK\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\keto\SDK\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \keto\SDK\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \keto\SDK\ApiClient $apiClient set the API client
     *
     * @return EnginesApi
     */
    public function setApiClient(\keto\SDK\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addOryAccessControlPolicyRoleMembers
     *
     * Add a member to an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @param \keto\SDK\Model\AddOryAccessControlPolicyRoleMembersBody $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OryAccessControlPolicyRole
     */
    public function addOryAccessControlPolicyRoleMembers($flavor, $id, $body = null)
    {
        list($response) = $this->addOryAccessControlPolicyRoleMembersWithHttpInfo($flavor, $id, $body);
        return $response;
    }

    /**
     * Operation addOryAccessControlPolicyRoleMembersWithHttpInfo
     *
     * Add a member to an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @param \keto\SDK\Model\AddOryAccessControlPolicyRoleMembersBody $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OryAccessControlPolicyRole, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOryAccessControlPolicyRoleMembersWithHttpInfo($flavor, $id, $body = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling addOryAccessControlPolicyRoleMembers');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addOryAccessControlPolicyRoleMembers');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/roles/{id}/members";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OryAccessControlPolicyRole',
                '/engines/acp/ory/{flavor}/roles/{id}/members'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OryAccessControlPolicyRole', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OryAccessControlPolicyRole', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOryAccessControlPolicy
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteOryAccessControlPolicy($flavor, $id)
    {
        list($response) = $this->deleteOryAccessControlPolicyWithHttpInfo($flavor, $id);
        return $response;
    }

    /**
     * Operation deleteOryAccessControlPolicyWithHttpInfo
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOryAccessControlPolicyWithHttpInfo($flavor, $id)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling deleteOryAccessControlPolicy');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteOryAccessControlPolicy');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/policies/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/engines/acp/ory/{flavor}/policies/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOryAccessControlPolicyRole
     *
     * Delete an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteOryAccessControlPolicyRole($flavor, $id)
    {
        list($response) = $this->deleteOryAccessControlPolicyRoleWithHttpInfo($flavor, $id);
        return $response;
    }

    /**
     * Operation deleteOryAccessControlPolicyRoleWithHttpInfo
     *
     * Delete an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOryAccessControlPolicyRoleWithHttpInfo($flavor, $id)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling deleteOryAccessControlPolicyRole');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteOryAccessControlPolicyRole');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/roles/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/engines/acp/ory/{flavor}/roles/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation doOryAccessControlPoliciesAllow
     *
     * Check if a request is allowed
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param \keto\SDK\Model\OryAccessControlPolicyAllowedInput $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\AuthorizationResult
     */
    public function doOryAccessControlPoliciesAllow($flavor, $body = null)
    {
        list($response) = $this->doOryAccessControlPoliciesAllowWithHttpInfo($flavor, $body);
        return $response;
    }

    /**
     * Operation doOryAccessControlPoliciesAllowWithHttpInfo
     *
     * Check if a request is allowed
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param \keto\SDK\Model\OryAccessControlPolicyAllowedInput $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\AuthorizationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function doOryAccessControlPoliciesAllowWithHttpInfo($flavor, $body = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling doOryAccessControlPoliciesAllow');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/allowed";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\AuthorizationResult',
                '/engines/acp/ory/{flavor}/allowed'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\AuthorizationResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\AuthorizationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\AuthorizationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOryAccessControlPolicy
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OryAccessControlPolicy
     */
    public function getOryAccessControlPolicy($flavor, $id)
    {
        list($response) = $this->getOryAccessControlPolicyWithHttpInfo($flavor, $id);
        return $response;
    }

    /**
     * Operation getOryAccessControlPolicyWithHttpInfo
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OryAccessControlPolicy, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOryAccessControlPolicyWithHttpInfo($flavor, $id)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling getOryAccessControlPolicy');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getOryAccessControlPolicy');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/policies/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OryAccessControlPolicy',
                '/engines/acp/ory/{flavor}/policies/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OryAccessControlPolicy', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OryAccessControlPolicy', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOryAccessControlPolicyRole
     *
     * Get an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OryAccessControlPolicyRole
     */
    public function getOryAccessControlPolicyRole($flavor, $id)
    {
        list($response) = $this->getOryAccessControlPolicyRoleWithHttpInfo($flavor, $id);
        return $response;
    }

    /**
     * Operation getOryAccessControlPolicyRoleWithHttpInfo
     *
     * Get an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OryAccessControlPolicyRole, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOryAccessControlPolicyRoleWithHttpInfo($flavor, $id)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling getOryAccessControlPolicyRole');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getOryAccessControlPolicyRole');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/roles/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OryAccessControlPolicyRole',
                '/engines/acp/ory/{flavor}/roles/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OryAccessControlPolicyRole', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OryAccessControlPolicyRole', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOryAccessControlPolicies
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param int $limit The maximum amount of policies returned. (optional)
     * @param int $offset The offset from where to start looking. (optional)
     * @param string $subject The subject for whom the policies are to be listed. (optional)
     * @param string $resource The resource for which the policies are to be listed. (optional)
     * @param string $action The action for which policies are to be listed. (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OryAccessControlPolicy[]
     */
    public function listOryAccessControlPolicies($flavor, $limit = null, $offset = null, $subject = null, $resource = null, $action = null)
    {
        list($response) = $this->listOryAccessControlPoliciesWithHttpInfo($flavor, $limit, $offset, $subject, $resource, $action);
        return $response;
    }

    /**
     * Operation listOryAccessControlPoliciesWithHttpInfo
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param int $limit The maximum amount of policies returned. (optional)
     * @param int $offset The offset from where to start looking. (optional)
     * @param string $subject The subject for whom the policies are to be listed. (optional)
     * @param string $resource The resource for which the policies are to be listed. (optional)
     * @param string $action The action for which policies are to be listed. (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OryAccessControlPolicy[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOryAccessControlPoliciesWithHttpInfo($flavor, $limit = null, $offset = null, $subject = null, $resource = null, $action = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling listOryAccessControlPolicies');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/policies";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($subject !== null) {
            $queryParams['subject'] = $this->apiClient->getSerializer()->toQueryValue($subject);
        }
        // query params
        if ($resource !== null) {
            $queryParams['resource'] = $this->apiClient->getSerializer()->toQueryValue($resource);
        }
        // query params
        if ($action !== null) {
            $queryParams['action'] = $this->apiClient->getSerializer()->toQueryValue($action);
        }
        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OryAccessControlPolicy[]',
                '/engines/acp/ory/{flavor}/policies'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OryAccessControlPolicy[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OryAccessControlPolicy[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOryAccessControlPolicyRoles
     *
     * List ORY Access Control Policy Roles
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param int $limit The maximum amount of policies returned. (optional)
     * @param int $offset The offset from where to start looking. (optional)
     * @param string $member The member for which the roles are to be listed. (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OryAccessControlPolicyRole[]
     */
    public function listOryAccessControlPolicyRoles($flavor, $limit = null, $offset = null, $member = null)
    {
        list($response) = $this->listOryAccessControlPolicyRolesWithHttpInfo($flavor, $limit, $offset, $member);
        return $response;
    }

    /**
     * Operation listOryAccessControlPolicyRolesWithHttpInfo
     *
     * List ORY Access Control Policy Roles
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param int $limit The maximum amount of policies returned. (optional)
     * @param int $offset The offset from where to start looking. (optional)
     * @param string $member The member for which the roles are to be listed. (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OryAccessControlPolicyRole[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOryAccessControlPolicyRolesWithHttpInfo($flavor, $limit = null, $offset = null, $member = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling listOryAccessControlPolicyRoles');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = $this->apiClient->getSerializer()->toQueryValue($member);
        }
        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OryAccessControlPolicyRole[]',
                '/engines/acp/ory/{flavor}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OryAccessControlPolicyRole[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OryAccessControlPolicyRole[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeOryAccessControlPolicyRoleMembers
     *
     * Remove a member from an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @param string $member The member to be removed. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return void
     */
    public function removeOryAccessControlPolicyRoleMembers($flavor, $id, $member)
    {
        list($response) = $this->removeOryAccessControlPolicyRoleMembersWithHttpInfo($flavor, $id, $member);
        return $response;
    }

    /**
     * Operation removeOryAccessControlPolicyRoleMembersWithHttpInfo
     *
     * Remove a member from an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param string $id The ID of the ORY Access Control Policy Role. (required)
     * @param string $member The member to be removed. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeOryAccessControlPolicyRoleMembersWithHttpInfo($flavor, $id, $member)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling removeOryAccessControlPolicyRoleMembers');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeOryAccessControlPolicyRoleMembers');
        }
        // verify the required parameter 'member' is set
        if ($member === null) {
            throw new \InvalidArgumentException('Missing the required parameter $member when calling removeOryAccessControlPolicyRoleMembers');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/roles/{id}/members/{member}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($member !== null) {
            $resourcePath = str_replace(
                "{" . "member" . "}",
                $this->apiClient->getSerializer()->toPathValue($member),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/engines/acp/ory/{flavor}/roles/{id}/members/{member}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation upsertOryAccessControlPolicy
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param \keto\SDK\Model\OryAccessControlPolicy $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OryAccessControlPolicy
     */
    public function upsertOryAccessControlPolicy($flavor, $body = null)
    {
        list($response) = $this->upsertOryAccessControlPolicyWithHttpInfo($flavor, $body);
        return $response;
    }

    /**
     * Operation upsertOryAccessControlPolicyWithHttpInfo
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param \keto\SDK\Model\OryAccessControlPolicy $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OryAccessControlPolicy, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertOryAccessControlPolicyWithHttpInfo($flavor, $body = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling upsertOryAccessControlPolicy');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/policies";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OryAccessControlPolicy',
                '/engines/acp/ory/{flavor}/policies'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OryAccessControlPolicy', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OryAccessControlPolicy', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation upsertOryAccessControlPolicyRole
     *
     * Upsert an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param \keto\SDK\Model\OryAccessControlPolicyRole $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OryAccessControlPolicyRole
     */
    public function upsertOryAccessControlPolicyRole($flavor, $body = null)
    {
        list($response) = $this->upsertOryAccessControlPolicyRoleWithHttpInfo($flavor, $body);
        return $response;
    }

    /**
     * Operation upsertOryAccessControlPolicyRoleWithHttpInfo
     *
     * Upsert an ORY Access Control Policy Role
     *
     * Client for keto
     *
     * @param string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param \keto\SDK\Model\OryAccessControlPolicyRole $body  (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OryAccessControlPolicyRole, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertOryAccessControlPolicyRoleWithHttpInfo($flavor, $body = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flavor when calling upsertOryAccessControlPolicyRole');
        }
        // parse inputs
        $resourcePath = "/engines/acp/ory/{flavor}/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                "{" . "flavor" . "}",
                $this->apiClient->getSerializer()->toPathValue($flavor),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OryAccessControlPolicyRole',
                '/engines/acp/ory/{flavor}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OryAccessControlPolicyRole', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OryAccessControlPolicyRole', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse500', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
