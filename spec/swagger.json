{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Ory Keto is a cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.",
    "title": "ORY Keto",
    "contact": {
      "name": "ORY",
      "url": "https://www.ory.sh",
      "email": "hi@ory.sh"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/ory/keto/blob/master/LICENSE"
    },
    "version": "Latest"
  },
  "basePath": "/",
  "paths": {
    "/check": {
      "get": {
        "description": "To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "read"
        ],
        "summary": "Check a relation tuple",
        "operationId": "getCheck",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace of the Relation Tuple",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object of the Relation Tuple",
            "name": "object",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Relation of the Relation Tuple",
            "name": "relation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SubjectID of the Relation Tuple",
            "name": "subject_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Namespace of the Subject Set",
            "name": "subject_set.namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object of the Subject Set",
            "name": "subject_set.object",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Relation of the Subject Set",
            "name": "subject_set.relation",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "max-depth",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "getCheckResponse",
            "schema": {
              "$ref": "#/definitions/getCheckResponse"
            }
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "403": {
            "description": "getCheckResponse",
            "schema": {
              "$ref": "#/definitions/getCheckResponse"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      },
      "post": {
        "description": "To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "read"
        ],
        "summary": "Check a relation tuple",
        "operationId": "postCheck",
        "parameters": [
          {
            "name": "Payload",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RelationQuery"
            }
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "max-depth",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "getCheckResponse",
            "schema": {
              "$ref": "#/definitions/getCheckResponse"
            }
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "403": {
            "description": "getCheckResponse",
            "schema": {
              "$ref": "#/definitions/getCheckResponse"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/expand": {
      "get": {
        "description": "Use this endpoint to expand a relation tuple.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "read"
        ],
        "summary": "Expand a Relation Tuple",
        "operationId": "getExpand",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace of the Subject Set",
            "name": "namespace",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Object of the Subject Set",
            "name": "object",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Relation of the Subject Set",
            "name": "relation",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "max-depth",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "expandTree",
            "schema": {
              "$ref": "#/definitions/expandTree"
            }
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "404": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/health/alive": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running.\nThis status does currently not include checks whether the database connection is working.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check alive status",
        "operationId": "isInstanceAlive",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g.\nthe database) are responsive as well.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check readiness status",
        "operationId": "isInstanceReady",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "503": {
            "description": "healthNotReadyStatus",
            "schema": {
              "$ref": "#/definitions/healthNotReadyStatus"
            }
          }
        }
      }
    },
    "/relation-tuples": {
      "get": {
        "description": "Get all relation tuples that match the query. Only the namespace field is required.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "read"
        ],
        "summary": "Query relation tuples",
        "operationId": "getRelationTuples",
        "parameters": [
          {
            "type": "string",
            "name": "page_token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Namespace of the Relation Tuple",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object of the Relation Tuple",
            "name": "object",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Relation of the Relation Tuple",
            "name": "relation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SubjectID of the Relation Tuple",
            "name": "subject_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Namespace of the Subject Set",
            "name": "subject_set.namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object of the Subject Set",
            "name": "subject_set.object",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Relation of the Subject Set",
            "name": "subject_set.relation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "getRelationTuplesResponse",
            "schema": {
              "$ref": "#/definitions/getRelationTuplesResponse"
            }
          },
          "404": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      },
      "put": {
        "description": "Use this endpoint to create a relation tuple.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "write"
        ],
        "summary": "Create a Relation Tuple",
        "operationId": "createRelationTuple",
        "parameters": [
          {
            "name": "Payload",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RelationQuery"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RelationQuery",
            "schema": {
              "$ref": "#/definitions/RelationQuery"
            }
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      },
      "delete": {
        "description": "Use this endpoint to delete relation tuples",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "write"
        ],
        "summary": "Delete Relation Tuples",
        "operationId": "deleteRelationTuples",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace of the Relation Tuple",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object of the Relation Tuple",
            "name": "object",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Relation of the Relation Tuple",
            "name": "relation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SubjectID of the Relation Tuple",
            "name": "subject_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Namespace of the Subject Set",
            "name": "subject_set.namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Object of the Subject Set",
            "name": "subject_set.object",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Relation of the Subject Set",
            "name": "subject_set.relation",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      },
      "patch": {
        "description": "Use this endpoint to patch one or more relation tuples.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "write"
        ],
        "summary": "Patch Multiple Relation Tuples",
        "operationId": "patchRelationTuples",
        "parameters": [
          {
            "name": "Payload",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchDelta"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "404": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This endpoint returns the service version typically notated using semantic versioning.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "version"
        ],
        "summary": "Get service version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "version",
            "schema": {
              "$ref": "#/definitions/version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateRelationTupleBadRequestBody": {
      "description": "CreateRelationTupleBadRequestBody CreateRelationTupleBadRequestBody create relation tuple bad request body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "CreateRelationTupleInternalServerErrorBody": {
      "description": "CreateRelationTupleInternalServerErrorBody CreateRelationTupleInternalServerErrorBody create relation tuple internal server error body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "DeleteRelationTuplesBadRequestBody": {
      "description": "DeleteRelationTuplesBadRequestBody DeleteRelationTuplesBadRequestBody DeleteRelationTuplesBadRequestBody DeleteRelationTuplesBadRequestBody DeleteRelationTuplesBadRequestBody delete relation tuples bad request body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "DeleteRelationTuplesInternalServerErrorBody": {
      "description": "DeleteRelationTuplesInternalServerErrorBody DeleteRelationTuplesInternalServerErrorBody delete relation tuples internal server error body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "GetCheckBadRequestBody": {
      "description": "GetCheckBadRequestBody GetCheckBadRequestBody GetCheckBadRequestBody GetCheckBadRequestBody GetCheckBadRequestBody get check bad request body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "GetCheckInternalServerErrorBody": {
      "description": "GetCheckInternalServerErrorBody GetCheckInternalServerErrorBody GetCheckInternalServerErrorBody get check internal server error body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "GetExpandBadRequestBody": {
      "description": "GetExpandBadRequestBody GetExpandBadRequestBody GetExpandBadRequestBody GetExpandBadRequestBody get expand bad request body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "GetExpandInternalServerErrorBody": {
      "description": "GetExpandInternalServerErrorBody GetExpandInternalServerErrorBody get expand internal server error body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "GetExpandNotFoundBody": {
      "description": "GetExpandNotFoundBody GetExpandNotFoundBody GetExpandNotFoundBody GetExpandNotFoundBody get expand not found body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "GetRelationTuplesInternalServerErrorBody": {
      "description": "GetRelationTuplesInternalServerErrorBody GetRelationTuplesInternalServerErrorBody get relation tuples internal server error body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "GetRelationTuplesNotFoundBody": {
      "description": "GetRelationTuplesNotFoundBody GetRelationTuplesNotFoundBody get relation tuples not found body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "InternalRelationTuple": {
      "type": "object",
      "required": [
        "namespace",
        "object",
        "relation"
      ],
      "properties": {
        "namespace": {
          "description": "Namespace of the Relation Tuple",
          "type": "string"
        },
        "object": {
          "description": "Object of the Relation Tuple",
          "type": "string"
        },
        "relation": {
          "description": "Relation of the Relation Tuple",
          "type": "string"
        },
        "subject_id": {
          "description": "SubjectID of the Relation Tuple\n\nEither SubjectSet or SubjectID are required.",
          "type": "string"
        },
        "subject_set": {
          "$ref": "#/definitions/SubjectSet"
        }
      }
    },
    "IsInstanceAliveInternalServerErrorBody": {
      "description": "IsInstanceAliveInternalServerErrorBody IsInstanceAliveInternalServerErrorBody IsInstanceAliveInternalServerErrorBody IsInstanceAliveInternalServerErrorBody is instance alive internal server error body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "PatchDelta": {
      "description": "PatchDelta PatchDelta PatchDelta PatchDelta PatchDelta PatchDelta patch delta",
      "type": "object",
      "properties": {
        "action": {
          "description": "action",
          "type": "string",
          "enum": [
            "[[[[[[insert delete]]]]]]"
          ]
        },
        "relation_tuple": {
          "$ref": "#/definitions/InternalRelationTuple"
        }
      }
    },
    "PatchRelationTuplesBadRequestBody": {
      "description": "PatchRelationTuplesBadRequestBody PatchRelationTuplesBadRequestBody patch relation tuples bad request body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "PatchRelationTuplesInternalServerErrorBody": {
      "description": "PatchRelationTuplesInternalServerErrorBody PatchRelationTuplesInternalServerErrorBody patch relation tuples internal server error body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "PatchRelationTuplesNotFoundBody": {
      "description": "PatchRelationTuplesNotFoundBody PatchRelationTuplesNotFoundBody patch relation tuples not found body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "PostCheckBadRequestBody": {
      "description": "PostCheckBadRequestBody PostCheckBadRequestBody PostCheckBadRequestBody PostCheckBadRequestBody PostCheckBadRequestBody PostCheckBadRequestBody post check bad request body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "PostCheckInternalServerErrorBody": {
      "description": "PostCheckInternalServerErrorBody PostCheckInternalServerErrorBody post check internal server error body",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "RelationQuery": {
      "description": "RelationQuery RelationQuery RelationQuery RelationQuery RelationQuery RelationQuery relation query",
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace of the Relation Tuple",
          "type": "string"
        },
        "object": {
          "description": "Object of the Relation Tuple",
          "type": "string"
        },
        "relation": {
          "description": "Relation of the Relation Tuple",
          "type": "string"
        },
        "subject_id": {
          "description": "SubjectID of the Relation Tuple\n\nEither SubjectSet or SubjectID can be provided.",
          "type": "string"
        },
        "subject_set": {
          "$ref": "#/definitions/SubjectSet"
        }
      }
    },
    "SubjectSet": {
      "type": "object",
      "required": [
        "namespace",
        "object",
        "relation"
      ],
      "properties": {
        "namespace": {
          "description": "Namespace of the Subject Set",
          "type": "string"
        },
        "object": {
          "description": "Object of the Subject Set",
          "type": "string"
        },
        "relation": {
          "description": "Relation of the Subject Set",
          "type": "string"
        }
      }
    },
    "UUID": {"type": "string", "format": "uuid4"},
    "expandTree": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "children": {
          "description": "children",
          "type": "array",
          "items": {
            "$ref": "#/definitions/expandTree"
          }
        },
        "subject_id": {
          "description": "subject id",
          "type": "string"
        },
        "subject_set": {
          "$ref": "#/definitions/SubjectSet"
        },
        "type": {
          "type": "string",
          "enum": [
            "union",
            "exclusion",
            "intersection",
            "leaf"
          ]
        }
      }
    },
    "genericError": {
      "description": "The standard error format",
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "description": "details",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "request": {
          "description": "request",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "getCheckResponse": {
      "description": "The content of the allowed field is mirrored in the HTTP status code.",
      "type": "object",
      "title": "GetCheckResponse Represents the response for a check request.",
      "required": [
        "allowed"
      ],
      "properties": {
        "allowed": {
          "description": "whether the relation tuple is allowed",
          "type": "boolean"
        }
      }
    },
    "getRelationTuplesResponse": {
      "description": "GetRelationTuplesResponse GetRelationTuplesResponse GetRelationTuplesResponse GetRelationTuplesResponse GetRelationTuplesResponse get relation tuples response",
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The opaque token to provide in a subsequent request\nto get the next page. It is the empty string iff this is\nthe last page.",
          "type": "string"
        },
        "relation_tuples": {
          "description": "relation tuples",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalRelationTuple"
          }
        }
      }
    },
    "healthNotReadyStatus": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains a list of errors that caused the not ready status.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "healthStatus": {
      "description": "HealthStatus health status",
      "type": "object",
      "properties": {
        "status": {
          "description": "Status always contains \"ok\".",
          "type": "string"
        }
      }
    },
    "subject": {
      "description": "Subject Subject Subject subject",
      "type": "object"
    },
    "version": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Version is the service's version.",
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "emptyResponse": {
      "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201."
    }
  }
}