{
  "components": {
    "schemas": {
      "UUID": {
        "format": "uuid4",
        "type": "string"
      },
      "checkOplSyntaxResult": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ory.keto.opl.v1alpha1.ParseError"
            },
            "type": "array"
          },
          "parseErrors": {
            "items": {
              "$ref": "#/components/schemas/ory.keto.opl.v1alpha1.ParseError"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "checkPermissionResult": {
        "description": "The response for a CheckService.Check rpc.",
        "properties": {
          "allowed": {
            "description": "Whether the specified subject (id)\nis related to the requested object.\n\nIt is false by default if no ACL matches.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "createRelationshipBody": {
        "properties": {
          "namespace": {
            "description": "The namespace this relation tuple lives in.",
            "type": "string"
          },
          "object": {
            "description": "The object related by this tuple.\nIt is an object in the namespace of the tuple.",
            "type": "string"
          },
          "relation": {
            "description": "The relation between an Object and a Subject.",
            "type": "string"
          },
          "subject_id": {
            "description": "A concrete id of the subject.",
            "type": "string"
          },
          "subject_set": {
            "$ref": "#/components/schemas/subjectSet"
          }
        },
        "type": "object"
      },
      "errorGeneric": {
        "description": "The standard Ory JSON API error format.",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/errorGeneric.Error"
          }
        },
        "required": ["error"],
        "title": "JSON API Error Response",
        "type": "object"
      },
      "errorGeneric.Error": {
        "properties": {
          "code": {
            "example": 404,
            "format": "int64",
            "title": "The status code",
            "type": "string"
          },
          "debug": {
            "description": "Debug information is often not exposed to protect against leaking sensitive information.",
            "title": "Debug information",
            "type": "string"
          },
          "details": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Further details about the error.",
            "title": "Further error details",
            "type": "object"
          },
          "id": {
            "description": "The error ID is useful when trying to identify various errors in application logic.",
            "title": "The error ID",
            "type": "string"
          },
          "message": {
            "description": "The error's message (required).",
            "example": "The requested resource could not be found.",
            "title": "The error message",
            "type": "string"
          },
          "reason": {
            "description": "Reason holds a human-readable reason for the error.",
            "title": "The error reason",
            "type": "string"
          },
          "request": {
            "description": "The request ID is often exposed internally in order to trace\nerrors across service architectures. This is often a UUID.",
            "example": "d7ef54b1-ec15-46e6-bccb-524b82c035e6",
            "title": "The request ID",
            "type": "string"
          },
          "status": {
            "description": "Status holds the human-readable HTTP status code.",
            "example": "Not Found",
            "title": "The status description",
            "type": "string"
          }
        },
        "required": ["message"],
        "type": "object"
      },
      "expandedPermissionTree": {
        "properties": {
          "children": {
            "description": "The children of this node.\n\nThis is never set if `node_type` == `NODE_TYPE_LEAF`.",
            "items": {
              "$ref": "#/components/schemas/expandedPermissionTree"
            },
            "type": "array"
          },
          "subject": {
            "$ref": "#/components/schemas/ory.keto.relation_tuples.v1alpha2.Subject"
          },
          "tuple": {
            "$ref": "#/components/schemas/relationship"
          },
          "type": {
            "$ref": "#/components/schemas/ory.keto.relation_tuples.v1alpha2.NodeType"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "ory.keto.opl.v1alpha1.ParseError": {
        "properties": {
          "end": {
            "$ref": "#/components/schemas/ory.keto.opl.v1alpha1.SourcePosition"
          },
          "message": {
            "type": "string"
          },
          "start": {
            "$ref": "#/components/schemas/ory.keto.opl.v1alpha1.SourcePosition"
          }
        },
        "type": "object"
      },
      "ory.keto.opl.v1alpha1.SourcePosition": {
        "properties": {
          "Line": {
            "format": "int64",
            "type": "integer"
          },
          "column": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ory.keto.relation_tuples.v1alpha2.CreateRelationTupleResponse": {
        "description": "The response from creating a new relationship.",
        "properties": {
          "relationTuple": {
            "$ref": "#/components/schemas/relationship"
          }
        },
        "type": "object"
      },
      "ory.keto.relation_tuples.v1alpha2.DeleteRelationTuplesResponse": {
        "type": "object"
      },
      "ory.keto.relation_tuples.v1alpha2.ExpandResponse": {
        "description": "The response for a ExpandService.Expand RPC.",
        "properties": {
          "tree": {
            "$ref": "#/components/schemas/expandedPermissionTree"
          }
        },
        "type": "object"
      },
      "ory.keto.relation_tuples.v1alpha2.GetVersionResponse": {
        "description": "Response of the VersionService.GetVersion RPC.",
        "properties": {
          "version": {
            "description": "The version string of the Ory Keto instance.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ory.keto.relation_tuples.v1alpha2.Namespace": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ory.keto.relation_tuples.v1alpha2.NodeType": {
        "default": "unspecified",
        "description": " - union: This node expands to a union of all children.\n - exclusion: Not implemented yet.\n - intersection: Not implemented yet.\n - leaf: This node is a leaf and contains no children.\nIts subject is a `SubjectID` unless `max_depth` was reached.\n - tuple_to_subject_set: This node is a leaf and contains no children.\nIts subject is a `SubjectID` unless `max_depth` was reached.\n - computed_subject_set: This node is a leaf and contains no children.\nIts subject is a `SubjectID` unless `max_depth` was reached.\n - not: This node is a leaf and contains no children.\nIts subject is a `SubjectID` unless `max_depth` was reached.",
        "enum": [
          "unspecified",
          "union",
          "exclusion",
          "intersection",
          "leaf",
          "tuple_to_subject_set",
          "computed_subject_set",
          "not"
        ],
        "type": "string"
      },
      "ory.keto.relation_tuples.v1alpha2.Subject": {
        "description": "Subject is either a concrete subject id or\na `SubjectSet` expanding to more Subjects.",
        "properties": {
          "id": {
            "description": "A concrete id of the subject.",
            "type": "string"
          },
          "set": {
            "$ref": "#/components/schemas/subjectSet"
          }
        },
        "type": "object"
      },
      "ory.keto.relation_tuples.v1alpha2.TransactRelationTuplesResponse": {
        "description": "The response of a WriteService.TransactRelationTuples rpc.",
        "type": "object"
      },
      "postCheckPermissionBody": {
        "description": "The request for a CheckService.Check RPC.\nChecks whether a specific subject is related to an object.",
        "properties": {
          "max-depth": {
            "description": "The maximum depth to search for a relation.\n\nIf the value is less than 1 or greater than the global\nmax-depth then the global max-depth will be used instead.",
            "format": "int32",
            "type": "integer"
          },
          "namespace": {
            "description": "The namespace to evaluate the check.\n\nNote: If you use the expand-API and the check\nevaluates a RelationTuple specifying a SubjectSet as\nsubject or due to a rewrite rule in a namespace config\nthis check request may involve other namespaces automatically.",
            "type": "string"
          },
          "object": {
            "description": "The related object in this check.",
            "type": "string"
          },
          "relation": {
            "description": "The relation between the Object and the Subject.",
            "type": "string"
          },
          "subject_id": {
            "description": "A concrete id of the subject.",
            "type": "string"
          },
          "subject_set": {
            "$ref": "#/components/schemas/subjectSetQuery"
          }
        },
        "type": "object"
      },
      "relationship": {
        "description": "RelationTuple defines a relation between an Object and a Subject.",
        "properties": {
          "namespace": {
            "description": "The namespace this relation tuple lives in.",
            "type": "string"
          },
          "object": {
            "description": "The object related by this tuple.\nIt is an object in the namespace of the tuple.",
            "type": "string"
          },
          "relation": {
            "description": "The relation between an Object and a Subject.",
            "type": "string"
          },
          "subject_id": {
            "description": "A concrete id of the subject.",
            "type": "string"
          },
          "subject_set": {
            "$ref": "#/components/schemas/subjectSet"
          }
        },
        "required": ["namespace", "object", "relation"],
        "type": "object"
      },
      "relationshipDelta": {
        "description": "Write-delta for a TransactRelationTuplesRequest.",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/relationshipDelta.Action"
          },
          "relation_tuple": {
            "$ref": "#/components/schemas/relationship"
          }
        },
        "required": ["action", "relation_tuple"],
        "type": "object"
      },
      "relationshipDelta.Action": {
        "default": "ACTION_UNSPECIFIED",
        "description": " - ACTION_UNSPECIFIED: Unspecified.\nThe `TransactRelationTuples` RPC ignores this\nRelationTupleDelta if an action was unspecified.\n - insert: Insertion of a new RelationTuple.\nIt is ignored if already existing.\n - delete: Deletion of the RelationTuple.\nIt is ignored if it does not exist.",
        "enum": ["ACTION_UNSPECIFIED", "insert", "delete"],
        "type": "string"
      },
      "relationshipNamespaces": {
        "properties": {
          "namespaces": {
            "items": {
              "$ref": "#/components/schemas/ory.keto.relation_tuples.v1alpha2.Namespace"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "relationships": {
        "description": "The response of a ReadService.ListRelationTuples RPC.",
        "properties": {
          "next_page_token": {
            "description": "The token required to get the next page.\nIf this is the last page, the token will be the empty string.",
            "type": "string"
          },
          "relation_tuples": {
            "description": "The relationships matching the list request.",
            "items": {
              "$ref": "#/components/schemas/relationship"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "subjectSet": {
        "description": "SubjectSet refers to all subjects who have\nthe same `relation` on an `object`.",
        "properties": {
          "namespace": {
            "description": "The namespace of the object and relation\nreferenced in this subject set.",
            "type": "string"
          },
          "object": {
            "description": "The object related by this subject set.",
            "type": "string"
          },
          "relation": {
            "description": "The relation between the object and the subjects.",
            "type": "string"
          }
        },
        "required": ["namespace", "object", "relation"],
        "type": "object"
      },
      "subjectSetQuery": {
        "description": "SubjectSetQuery refers to all subjects who have\nthe same `relation` on an `object`.",
        "properties": {
          "namespace": {
            "description": "The namespace of the object and relation\nreferenced in this subject set.",
            "type": "string"
          },
          "object": {
            "description": "The object related by this subject set.",
            "type": "string"
          },
          "relation": {
            "description": "The relation between the object and the subjects.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "hi@ory.sh"
    },
    "description": "Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.\n",
    "license": {
      "name": "Apache 2.0"
    },
    "title": "Ory Keto API",
    "version": ""
  },
  "openapi": "3.0.3",
  "paths": {
    "/admin/relation-tuples": {
      "delete": {
        "operationId": "deleteRelationships",
        "parameters": [
          {
            "description": "The namespace this relation tuple lives in.",
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The object related by this tuple.\nIt is an object in the namespace of the tuple.",
            "in": "query",
            "name": "object",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between an Object and a Subject.",
            "in": "query",
            "name": "relation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A concrete id of the subject.",
            "in": "query",
            "name": "subject_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The namespace of the object and relation\nreferenced in this subject set.",
            "in": "query",
            "name": "subject_set.namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The object related by this subject set.",
            "in": "query",
            "name": "subject_set.object",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between the object and the subjects.",
            "in": "query",
            "name": "subject_set.relation",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          }
        },
        "summary": "Deletes relationships based on relation query",
        "tags": ["relationship"]
      },
      "patch": {
        "operationId": "patchRelationships",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/relationshipDelta"
                },
                "type": "array"
              }
            }
          },
          "description": "The write delta for the relationships operated in one single transaction.\nEither all actions succeed or no change takes effect on error.",
          "required": true,
          "x-originalParamName": "relationTupleDeltas"
        },
        "responses": {
          "204": {
            "description": "An empty response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          }
        },
        "summary": "Writes one or more relationships in a single transaction.",
        "tags": ["relationship"]
      },
      "put": {
        "operationId": "createRelationship",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRelationshipBody"
              }
            }
          },
          "description": "The relationship to create.",
          "required": true,
          "x-originalParamName": "relationTuple"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship"
                }
              }
            },
            "description": "The created relationship."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          }
        },
        "summary": "Creates a relationship",
        "tags": ["relationship"]
      }
    },
    "/health/alive": {
      "get": {
        "description": "This endpoint returns a HTTP 200 status code when Ory Keto is accepting incoming\nHTTP requests. This status does currently not include checks whether the database connection is working.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "operationId": "isAlive",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "required": ["status"],
                  "type": "object"
                }
              }
            },
            "description": "Ory Keto is ready to accept connections."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorGeneric"
                }
              }
            },
            "description": "genericError"
          }
        },
        "summary": "Check HTTP Server Status",
        "tags": ["metadata"]
      }
    },
    "/health/ready": {
      "get": {
        "description": "This endpoint returns a HTTP 200 status code when Ory Keto is up running and the environment dependencies (e.g.\nthe database) are responsive as well.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of Ory Keto, the health status will never\nrefer to the cluster state, only to a single instance.",
        "operationId": "isReady",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "description": "Always \"ok\".",
                      "type": "string"
                    }
                  },
                  "required": ["status"],
                  "type": "object"
                }
              }
            },
            "description": "Ory Keto is ready to accept requests."
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Errors contains a list of errors that caused the not ready status.",
                      "type": "object"
                    }
                  },
                  "required": ["errors"],
                  "type": "object"
                }
              }
            },
            "description": "Ory Kratos is not yet ready to accept requests."
          }
        },
        "summary": "Check HTTP Server and Database Status",
        "tags": ["metadata"]
      }
    },
    "/namespaces": {
      "get": {
        "description": "Get all namespaces.",
        "operationId": "listRelationshipNamespaces",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationshipNamespaces"
                }
              }
            },
            "description": "The list of namespaces."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          }
        },
        "summary": "Lists Namespaces",
        "tags": ["relationship"]
      }
    },
    "/opl/syntax/check": {
      "post": {
        "operationId": "checkOplSyntax",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "format": "byte",
                "type": "string"
              }
            }
          },
          "required": true,
          "x-originalParamName": "content"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkOplSyntaxResult"
                }
              }
            },
            "description": "The result of the syntax checker"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          }
        },
        "summary": "Performs a syntax check request.",
        "tags": ["relationship"]
      }
    },
    "/relation-tuples": {
      "get": {
        "operationId": "getRelationships",
        "parameters": [
          {
            "description": "Optional. The maximum number of\nRelationTuples to return in the response.\n\nDefault: 100",
            "in": "query",
            "name": "page_size",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Optional. An opaque pagination token returned from\na previous call to `ListRelationTuples` that\nindicates where the page should start at.\n\nAn empty token denotes the first page. All successive\npages require the token from the previous page.",
            "in": "query",
            "name": "page_token",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The namespace",
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The related object in this check.",
            "in": "query",
            "name": "object",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between the Object and the Subject.",
            "in": "query",
            "name": "relation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A concrete id of the subject.",
            "in": "query",
            "name": "subject_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The namespace of the object and relation\nreferenced in this subject set.",
            "in": "query",
            "name": "subject_set.namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The object related by this subject set.",
            "in": "query",
            "name": "subject_set.object",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between the object and the subjects.",
            "in": "query",
            "name": "subject_set.relation",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationships"
                }
              }
            },
            "description": "The list of relationships."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          }
        },
        "summary": "Lists ACL relationships.",
        "tags": ["relationship"]
      }
    },
    "/relation-tuples/check": {
      "get": {
        "operationId": "checkPermissionOrError",
        "parameters": [
          {
            "description": "The namespace to evaluate the check.\n\nNote: If you use the expand-API and the check\nevaluates a RelationTuple specifying a SubjectSet as\nsubject or due to a rewrite rule in a namespace config\nthis check request may involve other namespaces automatically.",
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The related object in this check.",
            "in": "query",
            "name": "object",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between the Object and the Subject.",
            "in": "query",
            "name": "relation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A concrete id of the subject.",
            "in": "query",
            "name": "subject_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The namespace of the object and relation\nreferenced in this subject set.",
            "in": "query",
            "name": "subject_set.namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The object related by this subject set.",
            "in": "query",
            "name": "subject_set.object",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between the object and the subjects.",
            "in": "query",
            "name": "subject_set.relation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum depth to search for a relation.\n\nIf the value is less than 1 or greater than the global\nmax-depth then the global max-depth will be used instead.",
            "in": "query",
            "name": "max-depth",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkPermissionResult"
                }
              }
            },
            "description": "The response of the permission check, in case it is allowed. For the `/openapi` endpoints, the status code is always 200."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkPermissionResult"
                }
              }
            },
            "description": "The response of the permission check, in case it is not allowed. For the `/openapi` endpoints, the status code is always 200."
          }
        },
        "summary": "Performs an authorization check.",
        "tags": ["permission"]
      },
      "post": {
        "operationId": "postCheckPermissionOrError",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postCheckPermissionBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/postCheckPermissionBody"
              }
            }
          },
          "description": "The request for a CheckService.Check RPC.\nChecks whether a specific subject is related to an object.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkPermissionResult"
                }
              }
            },
            "description": "The response of the permission check, in case it is allowed. For the `/openapi` endpoints, the status code is always 200."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkPermissionResult"
                }
              }
            },
            "description": "The response of the permission check, in case it is not allowed. For the `/openapi` endpoints, the status code is always 200."
          }
        },
        "summary": "Performs an authorization check.",
        "tags": ["permission"]
      }
    },
    "/relation-tuples/check/openapi": {
      "get": {
        "operationId": "checkPermission",
        "parameters": [
          {
            "description": "The namespace to evaluate the check.\n\nNote: If you use the expand-API and the check\nevaluates a RelationTuple specifying a SubjectSet as\nsubject or due to a rewrite rule in a namespace config\nthis check request may involve other namespaces automatically.",
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The related object in this check.",
            "in": "query",
            "name": "object",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between the Object and the Subject.",
            "in": "query",
            "name": "relation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A concrete id of the subject.",
            "in": "query",
            "name": "subject_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The namespace of the object and relation\nreferenced in this subject set.",
            "in": "query",
            "name": "subject_set.namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The object related by this subject set.",
            "in": "query",
            "name": "subject_set.object",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between the object and the subjects.",
            "in": "query",
            "name": "subject_set.relation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum depth to search for a relation.\n\nIf the value is less than 1 or greater than the global\nmax-depth then the global max-depth will be used instead.",
            "in": "query",
            "name": "max-depth",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkPermissionResult"
                }
              }
            },
            "description": "The response of the permission check, in case it is allowed. For the `/openapi` endpoints, the status code is always 200."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkPermissionResult"
                }
              }
            },
            "description": "The response of the permission check, in case it is not allowed. For the `/openapi` endpoints, the status code is always 200."
          }
        },
        "summary": "Performs an authorization check.",
        "tags": ["permission"]
      },
      "post": {
        "operationId": "postCheckPermission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postCheckPermissionBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/postCheckPermissionBody"
              }
            }
          },
          "description": "The request for a CheckService.Check RPC.\nChecks whether a specific subject is related to an object.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkPermissionResult"
                }
              }
            },
            "description": "The response of the permission check, in case it is allowed. For the `/openapi` endpoints, the status code is always 200."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkPermissionResult"
                }
              }
            },
            "description": "The response of the permission check, in case it is not allowed. For the `/openapi` endpoints, the status code is always 200."
          }
        },
        "summary": "Performs an authorization check.",
        "tags": ["permission"]
      }
    },
    "/relation-tuples/expand": {
      "get": {
        "operationId": "expandPermissions",
        "parameters": [
          {
            "description": "The maximum depth of tree to build.\n\nIf the value is less than 1 or greater than the global\nmax-depth then the global max-depth will be used instead.\n\nIt is important to set this parameter to a meaningful\nvalue. Ponder how deep you really want to display this.",
            "in": "query",
            "name": "max-depth",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The namespace of the object and relation\nreferenced in this subject set.",
            "in": "query",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The object related by this subject set.",
            "in": "query",
            "name": "object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The relation between the object and the subjects.",
            "in": "query",
            "name": "relation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/expandedPermissionTree"
                }
              }
            },
            "description": "The response of the permission check, in case it is allowed. For the `/openapi` endpoints, the status code is always 200."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorGeneric"
                }
              }
            },
            "description": "errorGeneric"
          }
        },
        "summary": "Expands the subject set into a tree of subjects.",
        "tags": ["permission"]
      }
    },
    "/version": {
      "get": {
        "description": "This endpoint returns the version of Ory Keto.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the version will never\nrefer to the cluster state, only to a single instance.",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "version": {
                      "description": "The version of Ory Keto.",
                      "type": "string"
                    }
                  },
                  "required": ["version"],
                  "type": "object"
                }
              }
            },
            "description": "Returns the Ory Keto version."
          }
        },
        "summary": "Return Running Software Version.",
        "tags": ["metadata"]
      }
    }
  }
}
